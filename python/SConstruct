#####################################################################
#
#  ::::_aureservoir_::::
#  C++ library for analog reservoir computing neural networks
#
#  Scons build system for python bindings
#
#  Georg Holzmann, 2007
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#####################################################################

import os, glob, sys

#####################################################################
#  build system help
#####################################################################

Help("\nType: 'scons' to build aureservoir python bindings.")
Help("\n      'scons -c' to clean objects and python files.\n")
Help("\n      'scons install' to install python module.\n")
Help("\n      'scons doc' build module documentation.\n")

#####################################################################
#  general build options
#####################################################################

env = Environment( CPPPATH=['.', '../'] )
env.Append(CCFLAGS="-O2 -fPIC -Wall -ffast-math -mfpmath=sse -msse -msse2")
# TODO: besser machen:
env.Append( LIBS=['flens',] )
env.Append( CPPPATH=['/usr/include/python2.5','/usr/lib/python2.5/site-packages/numpy/core/include'] )
# siehe setup.py im numpy swig example, wie man automatisch numpy include
# path bekommt

#####################################################################
#  command line options
#####################################################################

opt = Options('options.cache')
opt.AddOptions(
  PathOption('flens_path', 'include path for FLENS', None),
  ('arch', 'optimize for specific architecture (e.g. pentium4)', None),
)
opt.Update(env)
opt.Save('options.cache',env)
Help(opt.GenerateHelpText(env))

if env.has_key('flens_path'):
	env.Append(CPPPATH=[env['flens_path']])
if env.has_key('arch'):
	env.Append(CCFLAGS="-march=" + env['arch'])

#####################################################################
#  check dependencies
#####################################################################

# don't check in help or clean mode
checking = 1
if "-h" in sys.argv:
	checking = 0
if env.GetOption('clean'):
	checking = 0

# do the checks
#conf = Configure(env)
#if checking:
	#if not conf.CheckLib('aureservoir', language="C++"):
		#print 'Did not find aureservoir library !'
		#Exit(1)
	#if not conf.CheckCXXHeader('aureservoir/aureservoir.h'):
		#print 'Did not find aureservoir header (aureservoir/aureservoir.h) !'
		#Exit(1)
	#if not conf.CheckLib('flens', language="C++"):
		#print 'Did not find FLENS library !'
		#Exit(1)
	#if not conf.CheckCXXHeader('flens/flens.h'):
		#print 'Did not find FLENS header (flens/flens.h) !'
		#Exit(1)
	#if not conf.CheckHeader('m_pd.h'):
		#print 'Did not find PD header (m_pd.h) !'
		#Exit(1)
#env = conf.Finish()

#####################################################################
#  build python-files
#####################################################################

target = "aureservoir"

# run swig command
# TODO: das muss sofort passiern -> Execute oder so aehnlich verwenden
env.Command('aureservoir_wrap.cpp','aureservoir.i','swig -c++ -python -o $TARGET $SOURCE')

sources = glob.glob("*.cpp")
env.SharedLibrary( target,
                   sources,
                   SHLIBPREFIX="_" )

#####################################################################
#  additional cleanup for SWIG output
#####################################################################

if env.GetOption('clean'):
	print "Warum funktioniert CLEAN nicht ?"
	Delete("*_wrap.cpp")
	Delete("*.py")
	Delete("*.pyc")

#####################################################################
#  install library
#####################################################################

instfiles = [ 'aureservoir.py',
              '_aureservoir.so' ]

# TODO: pfad gscheit handeln
libinstall = env.Install("/usr/lib/python2.5/site-packages", instfiles)

env.Alias("install", [libinstall,])

#####################################################################
#  build documentation
#####################################################################

     #env.Command('foo.out', 'foo.in', "sed 's/x/y/' < $SOURCE > $TARGET")
     #sed 's/x/y/' < foo.in > foo.out
  

#if 'doc' in COMMAND_LINE_TARGETS:
	## build swig docu from doxygen xml
	#doc = env.Command('tmp.i', \
                    #'../aureservoir/xml/classaureservoir_1_1ESN.xml', \
                    #"python $SOURCE $TARGET")

#####################################################################
#  EOF
#####################################################################
