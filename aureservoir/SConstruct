#####################################################################
#
#  ::::_aureservoir_::::
#  C++ library for analog reservoir computing neural networks
#
#  Scons build system for aureservoir
#  (here only installing headers)
#
#  Georg Holzmann, 2007
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#####################################################################

import os, glob, sys, os.path

#####################################################################
#  build files
#####################################################################

files = glob.glob("*.h")   # install all *.h files
files += glob.glob("*.hpp")   # install all *.h files

#####################################################################
#  build system help
#####################################################################

Help("\nType: 'scons' for dependency checking.")
Help("\n      'scons install' to install headers.\n")

#####################################################################
#  general build options
#####################################################################

env = Environment(ENV = {'PATH' : os.environ['PATH'],
                         'TERM' : os.environ['TERM'],
                         'HOME' : os.environ['HOME']})
env.Append( CPPPATH=['.',] )
env.Append(CCFLAGS="-O2 -fPIC -Wall -ffast-math -mfpmath=sse -msse -msse2")

#####################################################################
#  command line options
#####################################################################

opt = Options('options.cache')
opt.AddOptions(
  PathOption('flens_path', 'include path for FLENS', None),
  ('prefix', 'install prefix', '/usr/local')
)
opt.Update(env)
opt.Save('options.cache',env)
Help(opt.GenerateHelpText(env))

if env.has_key('flens_path'):
	env.Append(CPPPATH=[env['flens_path']])
if env.has_key('prefix'):
	prefix = env['prefix']

#####################################################################
#  check dependencies
#####################################################################

# don't check in help or clean mode
checking = 1
if "-h" in sys.argv:
	checking = 0

# do the checks
conf = Configure(env)
if checking:
	if not conf.CheckLib('flens', language="C++"):
		print 'Did not find FLENS library !'
		Exit(1)
	if not conf.CheckCXXHeader('flens/flens.h'):
		print 'Did not find FLENS header (flens/flens.h) !'
		Exit(1)
	if not conf.CheckHeader('xmmintrin.h'):
		print 'Did not find xmmintrin.h !'
		Exit(1)
env = conf.Finish()

#####################################################################
#  install library
#####################################################################

headerinstall = env.Install(os.path.join(env['prefix'], "include",
                            "aureservoir"), files)

env.Alias("install", [headerinstall,])

#####################################################################
#  EOF
#####################################################################
