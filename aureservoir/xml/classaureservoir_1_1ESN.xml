<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="classaureservoir_1_1ESN" kind="class" prot="public">
    <compoundname>aureservoir::ESN</compoundname>
    <includes refid="esn_8h" local="no">esn.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
        <defval>float</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>algorithms are friends</header>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1c15108dd5d291349b4cfeeff6be19bfa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class InitBase&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>InitBase&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="599" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1ffcd21225865c34b1366ce6b8e166fa2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class InitStd&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>InitStd&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="600" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1fadb2174ebe2fc0e46e4189829495d8a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TrainBase&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>TrainBase&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="601" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_17e49b87f78cfa7e35a6d873a4c40b9dd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TrainPI&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>TrainPI&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="602" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1e7c4beca8c90bf892827a3716e978f4a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TrainLS&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>TrainLS&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="603" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1cd5aba36fe572e08dd1cbe7d881a56e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TrainRidgeReg&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>TrainRidgeReg&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="604" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1446111b9fdc9f67797ef49bd87b58c24" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TrainDSPI&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>TrainDSPI&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="605" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_13e3c3fdbb36eb2486bdd7c0753c2f9ff" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimBase&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimBase&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="606" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_114588a3c64b2c4106d3669ed86b41f38" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimStd&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimStd&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="607" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_11552ee6255e2596578a8859aba9f5a3d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimSquare&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimSquare&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="608" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1206264c0d590319efec92db462588748" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimLI&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimLI&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="609" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1fd00f52134466f63ee8b919951733757" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimBP&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimBP&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="610" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1f095d841bde905bddf3923445b8e0ebd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimFilter&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimFilter&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="611" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_11578954dfa00c2d838c7d023c9f6026d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimFilter2&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimFilter2&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="612" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classaureservoir_1_1ESN_1c8b28874c27f39ce0067ca5e1474d226" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SimFilterDS&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>SimFilterDS&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="613" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Algorithm interface</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1e2922b7050f6259db289e456661454d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialization Algorithm for an Echo State Network <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1InitBase" kindref="compound">InitBase</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="96" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="94" bodyend="96"/>
        <references refid="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" compoundref="esn_8h" startline="511">aureservoir::ESN&lt; T &gt;::init_</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double aureservoir::ESN&lt; T &gt;::adapt</definition>
        <argsstring>(const DEMatrix &amp;in)</argsstring>
        <name>adapt</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reservoir Adaptation Algorithm Interface At the moment this is only the Gaussian-IP reservoir adaptation method for tanh neurons. <simplesect kind="see"><para>&quot;Adapting reservoirs to get Gaussian distributions&quot; by David Verstraeten, Benjamin Schrauwen and Dirk Stroobandt</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix of input values (inputs x timesteps), the reservoir will be adapted by this number of timesteps. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mean value of differences between all parameters before and after adaptation, can be used to see if learning still makes an progress. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="111" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="113" bodyend="176"/>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce09c6f5805c0ee627c9469fcca1900bf4" compoundref="activations_8h" startline="35">aureservoir::ACT_LINEAR</references>
        <references refid="namespaceaureservoir_1fa29fb60114d2064a41bff293bfb14ee" compoundref="activations_8h" startline="111" endline="118">aureservoir::act_tanh2</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce560574625ce248cdb43b7fa05815ca3f" compoundref="activations_8h" startline="37">aureservoir::ACT_TANH2</references>
        <references refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" compoundref="esn_8h" startline="571">aureservoir::ESN&lt; T &gt;::init_params_</references>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98140e457ae43c6e96b4e13db653be14a2" compoundref="init_8h" startline="63">aureservoir::IP_LEARNRATE</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b9859be72149c51dec368313cba91e5057a" compoundref="init_8h" startline="64">aureservoir::IP_MEAN</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b9898ff0a83e60538e4ecb8ac70b2ab761e" compoundref="init_8h" startline="65">aureservoir::IP_VAR</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea97cd57f7b6817ee0ae026526e6119ae1" compoundref="esn_8h" startline="576">aureservoir::ESN&lt; T &gt;::RESERVOIR_ACT</references>
        <references refid="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" compoundref="esn_8hpp" startline="750" endline="778">aureservoir::ESN&lt; T &gt;::setReservoirAct</references>
        <references refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" compoundref="esn_8h" startline="133" endline="134">aureservoir::ESN&lt; T &gt;::simulate</references>
        <references refid="namespaceaureservoir_1900a3f9e9843e3c9861c483c1611400f" compoundref="activations_8h" startline="99">aureservoir::tanh2_a_</references>
        <references refid="namespaceaureservoir_1527c5b6714a8d3bfb2e4052e37f69f58" compoundref="activations_8h" startline="101">aureservoir::tanh2_b_</references>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
        <referencedby refid="classaureservoir_1_1ESN_1d9ed5ad77d21639a04d2c7d431636e46" compoundref="esn_8hpp" startline="277" endline="292">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::train</definition>
        <argsstring>(const DEMatrix &amp;in, const DEMatrix &amp;out, int washout)</argsstring>
        <name>train</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>washout</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Training Algorithm Interface <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1TrainBase" kindref="compound">TrainBase</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix of input values (inputs x timesteps) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix of desired output values (outputs x timesteps) for teacher forcing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>washout</parametername>
</parameternamelist>
<parameterdescription>
<para>washout time in samples, used to get rid of the transient dynamics of the network starting state </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="124" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="179" bodyend="252"/>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98f657a7254946e753f6df7b91ef07dc60" compoundref="init_8h" startline="58">aureservoir::DS_MAXDELAY</references>
        <references refid="classaureservoir_1_1ESN_1a319071ee7b33034aca7babbbc0adf81" compoundref="esn_8h" startline="346" endline="346">aureservoir::ESN&lt; T &gt;::getDelays</references>
        <references refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" compoundref="esn_8h" startline="571">aureservoir::ESN&lt; T &gt;::init_params_</references>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b980fbdae1c822812f076727a0349efeb7d" compoundref="init_8h" startline="66">aureservoir::RELAXATION_STAGES</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" compoundref="esn_8h" startline="133" endline="134">aureservoir::ESN&lt; T &gt;::simulate</references>
        <references refid="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" compoundref="esn_8h" startline="514">aureservoir::ESN&lt; T &gt;::train_</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1b078825cfdbc5f11d337942d768d79e8" compoundref="esn_8hpp" startline="295" endline="316">aureservoir::ESN&lt; T &gt;::train</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::simulate</definition>
        <argsstring>(const DEMatrix &amp;in, DEMatrix &amp;out)</argsstring>
        <name>simulate</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simulation Algorithm Interface <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimBase" kindref="compound">SimBase</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix of input values (inputs x timesteps) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix for output values (outputs x timesteps) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="134" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="133" bodyend="134"/>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1370b95f753b368bea3856c6889213ed0" compoundref="esn_8hpp" startline="319" endline="350">aureservoir::ESN&lt; T &gt;::simulate</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d87d004894222f0653062bdc71dc2c78" compoundref="esn_8hpp" startline="353" endline="377">aureservoir::ESN&lt; T &gt;::simulateStep</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" compoundref="esn_8hpp" startline="255" endline="274">aureservoir::ESN&lt; T &gt;::teacherForce</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::teacherForce</definition>
        <argsstring>(const DEMatrix &amp;in, DEMatrix &amp;out)</argsstring>
        <name>teacherForce</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Teacher Forcing a input and target signal without learning output weights. This is useful for ESNs in generator mode to initialize the internal state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix of input values (inputs x timesteps) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix for output values (outputs x timesteps) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="143" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="255" bodyend="274"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" compoundref="esn_8h" startline="133" endline="134">aureservoir::ESN&lt; T &gt;::simulate</references>
        <referencedby refid="classaureservoir_1_1ESN_1e6fb9b7fbf1499756d0939c5ccf2ea31" compoundref="esn_8hpp" startline="380" endline="398">aureservoir::ESN&lt; T &gt;::teacherForce</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d83bd214d17d7c1b06f9d1f9e85f3dcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::resetState</definition>
        <argsstring>()</argsstring>
        <name>resetState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>resets the internal state vector x of the reservoir to zero </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="149" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="148" bodyend="152"/>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>C-style Algorithm interface</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d9ed5ad77d21639a04d2c7d431636e46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double aureservoir::ESN&lt; T &gt;::adapt</definition>
        <argsstring>(T *inmtx, int inrows, int incols)</argsstring>
        <name>adapt</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>C-style Reservoir Adaptation Algorithm Interface (data will be copied into a FLENS matrix) At the moment this is only the Gaussian-IP reservoir adaptation method for tanh neurons. <simplesect kind="see"><para>&quot;Adapting reservoirs to get Gaussian distributions&quot; by David Verstraeten, Benjamin Schrauwen and Dirk Stroobandt</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix of input values (inputs x timesteps), the reservoir will be adapted by this number of timesteps. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mean value of differences between all parameters before and after adaptation, can be used to see if learning still makes an progress. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="171" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="277" bodyend="292"/>
        <references refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</references>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1b078825cfdbc5f11d337942d768d79e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::train</definition>
        <argsstring>(T *inmtx, int inrows, int incols, T *outmtx, int outrows, int outcols, int washout)</argsstring>
        <name>train</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>outmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outcols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>washout</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>C-style Training Algorithm Interface (data will be copied into a FLENS matrix) <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1TrainBase" kindref="compound">TrainBase</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix in row major storage (usual C array) (inputs x timesteps) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>output matrix in row major storage (outputs x timesteps) for teacher forcing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>washout</parametername>
</parameternamelist>
<parameterdescription>
<para>washout time in samples, used to get rid of the transient dynamics of the network starting state </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="187" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="295" bodyend="316"/>
        <references refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1370b95f753b368bea3856c6889213ed0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::simulate</definition>
        <argsstring>(T *inmtx, int inrows, int incols, T *outmtx, int outrows, int outcols)</argsstring>
        <name>simulate</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>outmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outcols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>C-style Simulation Algorithm Interface with some additional error checking. (data will be copied into a FLENS matrix) <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimBase" kindref="compound">SimBase</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix in row major storage (usual C array) (inputs x timesteps) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>output matrix in row major storage (outputs x timesteps), </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Data must be already allocated! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="201" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="319" bodyend="350"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" compoundref="esn_8h" startline="133" endline="134">aureservoir::ESN&lt; T &gt;::simulate</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d87d004894222f0653062bdc71dc2c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::simulateStep</definition>
        <argsstring>(T *invec, int insize, T *outvec, int outsize)</argsstring>
        <name>simulateStep</name>
        <param>
          <type>T *</type>
          <declname>invec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insize</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>outvec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outsize</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>C-style Simulation Algorithm Interface, for single step simulation <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimBase" kindref="compound">SimBase</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector, size = inputs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>output vector, size = outputs </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>Data must be already allocated! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="212" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="353" bodyend="377"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" compoundref="esn_8h" startline="133" endline="134">aureservoir::ESN&lt; T &gt;::simulate</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1e6fb9b7fbf1499756d0939c5ccf2ea31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::teacherForce</definition>
        <argsstring>(T *inmtx, int inrows, int incols, T *outmtx, int outrows, int outcols)</argsstring>
        <name>teacherForce</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>outmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outcols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Teacher Forcing a input and target signal without learning output weights. This is useful for ESNs in generator mode to initialize the internal state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix in row major storage (usual C array) (inputs x timesteps) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>output matrix in row major storage (outputs x timesteps) for teacher forcing </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="224" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="380" bodyend="398"/>
        <references refid="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" compoundref="esn_8hpp" startline="255" endline="274">aureservoir::ESN&lt; T &gt;::teacherForce</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Additional Interface for Bandpass and IIR-Filter Neurons</header>
      <description></description>
      <memberdef kind="function" id="classaureservoir_1_1ESN_178881e130ba2c0b588c9cf5c6c1b7bd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setBPCutoff</definition>
        <argsstring>(const DEVector &amp;f1, const DEVector &amp;f2)</argsstring>
        <name>setBPCutoff</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set lowpass/highpass cutoff frequencies for bandpass style neurons. &quot; <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimBP" kindref="compound">SimBP</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f1</parametername>
</parameternamelist>
<parameterdescription>
<para>vector with lowpass cutoff for all neurons (size = neurons) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f2</parametername>
</parameternamelist>
<parameterdescription>
<para>vector with highpass cutoffs (size = neurons) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="238" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="401" bodyend="408"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a2304986b6862a50a3a8e633080d36b03" compoundref="simulate_8h" startline="42">aureservoir::SIM_BP</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" compoundref="esn_8h" startline="580">aureservoir::ESN&lt; T &gt;::SIMULATE_ALG</references>
        <referencedby refid="classaureservoir_1_1ESN_191d0fb143a7c8dbfb63bbaa1fccbda55" compoundref="esn_8hpp" startline="411" endline="428">aureservoir::ESN&lt; T &gt;::setBPCutoff</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_191d0fb143a7c8dbfb63bbaa1fccbda55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setBPCutoff</definition>
        <argsstring>(T *f1vec, int f1size, T *f2vec, int f2size)</argsstring>
        <name>setBPCutoff</name>
        <param>
          <type>T *</type>
          <declname>f1vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f1size</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>f2vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f2size</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set lowpass/highpass cutoff frequencies for bandpass style neurons &quot; (C-style Interface).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f1</parametername>
</parameternamelist>
<parameterdescription>
<para>vector with lowpass cutoff for all neurons (size = neurons) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f2</parametername>
</parameternamelist>
<parameterdescription>
<para>vector with highpass cutoffs (size = neurons) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="248" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="411" bodyend="428"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_178881e130ba2c0b588c9cf5c6c1b7bd4" compoundref="esn_8hpp" startline="401" endline="408">aureservoir::ESN&lt; T &gt;::setBPCutoff</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_190413e9cb722f478b8771a0cdfd6a441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setIIRCoeff</definition>
        <argsstring>(const DEMatrix &amp;B, const DEMatrix &amp;A, int series=1)</argsstring>
        <name>setIIRCoeff</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>series</declname>
          <defval>1</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the IIR-Filter coefficients, like Matlabs filter object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix with numerator coefficient vectors (m x nb) m ... nr of parallel filters (neurons) nb ... nr of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix with denominator coefficient vectors (m x na) m ... nr of parallel filters (neurons) na ... nr of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seris</parametername>
</parameternamelist>
<parameterdescription>
<para>nr of serial IIR filters, e.g. if series=2 the coefficients B and A will be divided in its half and calculated with 2 serial IIR filters </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="264" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="431" bodyend="441"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123ab47d5c9464ab2f7dcb81bfcd386b2369" compoundref="simulate_8h" startline="43">aureservoir::SIM_FILTER</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a342f6ab7bc5d63f3d828c99f3811aaad" compoundref="simulate_8h" startline="44">aureservoir::SIM_FILTER2</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a3946a935a47b2ebffa86bcffbfcff65f" compoundref="simulate_8h" startline="45">aureservoir::SIM_FILTER_DS</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a37fb0f9ed7a59fdb80971a142a08ccd6" compoundref="simulate_8h" startline="40">aureservoir::SIM_SQUARE</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" compoundref="esn_8h" startline="580">aureservoir::ESN&lt; T &gt;::SIMULATE_ALG</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1a7f9011ad241e85620adee8d14cd207f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setIIRCoeff</definition>
        <argsstring>(T *bmtx, int brows, int bcols, T *amtx, int arows, int acols, int series=1)</argsstring>
        <name>setIIRCoeff</name>
        <param>
          <type>T *</type>
          <declname>bmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>brows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bcols</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>amtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>acols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>series</declname>
          <defval>1</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the IIR-Filter coefficients, like Matlabs filter object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix with numerator coefficient vectors (m x nb) m ... nr of parallel filters (neurons) nb ... nr of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix with denominator coefficient vectors (m x na) m ... nr of parallel filters (neurons) na ... nr of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seris</parametername>
</parameternamelist>
<parameterdescription>
<para>nr of serial IIR filters, e.g. if series=2 the coefficients B and A will be divided in its half and calculated with 2 serial IIR filters </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="281" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="444" bodyend="466"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GET parameters</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::post</definition>
        <argsstring>()</argsstring>
        <name>post</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>posts current parameters to stdout </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="292" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="469" bodyend="509"/>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98db1dca4e49516b1790fe21ec1cff75f5" compoundref="init_8h" startline="47">aureservoir::ALPHA</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98d5a6a266b20feb9dfe011d0d5e223087" compoundref="init_8h" startline="46">aureservoir::CONNECTIVITY</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b980cd43ea7ef81d55c9222dba73288a043" compoundref="init_8h" startline="51">aureservoir::FB_CONNECTIVITY</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b9829e7183dbadf26019d129ff5fb7877a4" compoundref="init_8h" startline="52">aureservoir::FB_SCALE</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98490f6a2e77017327c1b60bbd65873ada" compoundref="init_8h" startline="53">aureservoir::FB_SHIFT</references>
        <references refid="classaureservoir_1_1ESN_1d2b7c4da5d09cabaf476126a82802d55" compoundref="esn_8hpp" startline="967" endline="987">aureservoir::ESN&lt; T &gt;::getActString</references>
        <references refid="classaureservoir_1_1ESN_11db6876e512c3f95d74a1a4551b7c556" compoundref="esn_8hpp" startline="990" endline="1000">aureservoir::ESN&lt; T &gt;::getInitString</references>
        <references refid="classaureservoir_1_1ESN_1c787f77ca1d66b92597a3f40b73da5a5" compoundref="esn_8hpp" startline="1003" endline="1031">aureservoir::ESN&lt; T &gt;::getSimString</references>
        <references refid="classaureservoir_1_1ESN_1dc760e3521c01ed98ec1d857026851cf" compoundref="esn_8hpp" startline="1034" endline="1053">aureservoir::ESN&lt; T &gt;::getTrainString</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98b3b22e40718b8703a4ed57c5cc21d80c" compoundref="init_8h" startline="48">aureservoir::IN_CONNECTIVITY</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b980b3995db2fb6ca472d1745fcbfdadfe7" compoundref="init_8h" startline="49">aureservoir::IN_SCALE</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b9802f10438caaa2d1b279162a7828b986c" compoundref="init_8h" startline="50">aureservoir::IN_SHIFT</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeaad7a7be9350552a1c9f36b3fa765ec05" compoundref="esn_8h" startline="578">aureservoir::ESN&lt; T &gt;::INIT_ALG</references>
        <references refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" compoundref="esn_8h" startline="571">aureservoir::ESN&lt; T &gt;::init_params_</references>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98426b53a081b250d219eda89599413a26" compoundref="init_8h" startline="54">aureservoir::LEAKING_RATE</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" compoundref="esn_8h" startline="567">aureservoir::ESN&lt; T &gt;::noise_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4b87db9277a823b8bedb26ea4dfa8dd0" compoundref="esn_8h" startline="577">aureservoir::ESN&lt; T &gt;::OUTPUT_ACT</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea97cd57f7b6817ee0ae026526e6119ae1" compoundref="esn_8h" startline="576">aureservoir::ESN&lt; T &gt;::RESERVOIR_ACT</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a38879faf2a4c65df30952d06c8c4bde6" compoundref="simulate_8h" startline="41">aureservoir::SIM_LI</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" compoundref="esn_8h" startline="580">aureservoir::ESN&lt; T &gt;::SIMULATE_ALG</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4e8457810739551b22be6c4557eb8076" compoundref="esn_8h" startline="579">aureservoir::ESN&lt; T &gt;::TRAIN_ALG</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_141e3e08f736780e1afce7ba926c46f92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int aureservoir::ESN&lt; T &gt;::getSize</definition>
        <argsstring>() const </argsstring>
        <name>getSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reservoir size (nr of neurons) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="295" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="295" bodyend="295"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_138d67c10d14b742d37c31fb248c8d175" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int aureservoir::ESN&lt; T &gt;::getInputs</definition>
        <argsstring>() const </argsstring>
        <name>getInputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>nr of inputs to the reservoir </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="297" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="297" bodyend="297"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1cb5fb557989a39b2f29853e4e5e294a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int aureservoir::ESN&lt; T &gt;::getOutputs</definition>
        <argsstring>() const </argsstring>
        <name>getOutputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>nr of outputs from the reservoir </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="299" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="299" bodyend="299"/>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1ce91732de641dc4c102ee24da668bf01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double aureservoir::ESN&lt; T &gt;::getNoise</definition>
        <argsstring>() const </argsstring>
        <name>getNoise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>current noise level </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="301" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="301" bodyend="301"/>
        <references refid="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" compoundref="esn_8h" startline="567">aureservoir::ESN&lt; T &gt;::noise_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1ea7de7feaa7d81c2d27a17d048b13447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T aureservoir::ESN&lt; T &gt;::getInitParam</definition>
        <argsstring>(InitParameter key)</argsstring>
        <name>getInitParam</name>
        <param>
          <type><ref refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98" kindref="member">InitParameter</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns an initialization parametern from the parameter map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the requested parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="308" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="308" bodyend="308"/>
        <references refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" compoundref="esn_8h" startline="571">aureservoir::ESN&lt; T &gt;::init_params_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1e9bc7c3da6f9ab961c0505a81f117c46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceaureservoir_1fcd13e94b1f8f20257eab73b6a8498ce" kindref="member">InitAlgorithm</ref></type>
        <definition>InitAlgorithm aureservoir::ESN&lt; T &gt;::getInitAlgorithm</definition>
        <argsstring>() const </argsstring>
        <name>getInitAlgorithm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>initialization algorithm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="312" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="311" bodyend="312"/>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeaad7a7be9350552a1c9f36b3fa765ec05" compoundref="esn_8h" startline="578">aureservoir::ESN&lt; T &gt;::INIT_ALG</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_19a4ccadd8ba92b87332e38882acfef40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf" kindref="member">TrainAlgorithm</ref></type>
        <definition>TrainAlgorithm aureservoir::ESN&lt; T &gt;::getTrainAlgorithm</definition>
        <argsstring>() const </argsstring>
        <name>getTrainAlgorithm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>training algorithm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="315" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="314" bodyend="315"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4e8457810739551b22be6c4557eb8076" compoundref="esn_8h" startline="579">aureservoir::ESN&lt; T &gt;::TRAIN_ALG</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_104eb6c2bfba313922734c58fbff8b4af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a" kindref="member">SimAlgorithm</ref></type>
        <definition>SimAlgorithm aureservoir::ESN&lt; T &gt;::getSimAlgorithm</definition>
        <argsstring>() const </argsstring>
        <name>getSimAlgorithm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>simulation algorithm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="318" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="317" bodyend="318"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" compoundref="esn_8h" startline="580">aureservoir::ESN&lt; T &gt;::SIMULATE_ALG</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_10572a08a81856629baafdff0f1871915" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce" kindref="member">ActivationFunction</ref></type>
        <definition>ActivationFunction aureservoir::ESN&lt; T &gt;::getReservoirAct</definition>
        <argsstring>() const </argsstring>
        <name>getReservoirAct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reservoir activation function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="322" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="321" bodyend="322"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea97cd57f7b6817ee0ae026526e6119ae1" compoundref="esn_8h" startline="576">aureservoir::ESN&lt; T &gt;::RESERVOIR_ACT</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_175b75a2dc732f0a666e18f8ca2189767" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce" kindref="member">ActivationFunction</ref></type>
        <definition>ActivationFunction aureservoir::ESN&lt; T &gt;::getOutputAct</definition>
        <argsstring>() const </argsstring>
        <name>getOutputAct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>output activation function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="325" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="324" bodyend="325"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4b87db9277a823b8bedb26ea4dfa8dd0" compoundref="esn_8h" startline="577">aureservoir::ESN&lt; T &gt;::OUTPUT_ACT</references>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GET internal data</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_103cf21acca2dc7410ebf4e5f2f87818f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
        <definition>const DEMatrix&amp; aureservoir::ESN&lt; T &gt;::getWin</definition>
        <argsstring>()</argsstring>
        <name>getWin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>input weight matrix (neurons x inputs) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="332" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="332" bodyend="332"/>
        <references refid="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" compoundref="esn_8h" startline="522">aureservoir::ESN&lt; T &gt;::Win_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d1b8423502f283e0ff7b219525abc337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structaureservoir_1_1SPMatrix" kindref="compound">SPMatrix</ref> &amp;</type>
        <definition>const SPMatrix&amp; aureservoir::ESN&lt; T &gt;::getW</definition>
        <argsstring>()</argsstring>
        <name>getW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reservoir weight matrix (neurons x neurons) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="334" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="334" bodyend="334"/>
        <references refid="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" compoundref="esn_8h" startline="525">aureservoir::ESN&lt; T &gt;::W_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_136e2868278aa27b9df6b7651ed5b867a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
        <definition>const DEMatrix&amp; aureservoir::ESN&lt; T &gt;::getWback</definition>
        <argsstring>()</argsstring>
        <name>getWback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>feedback (output to reservoir) weight matrix (neurons x outputs) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="336" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="336" bodyend="336"/>
        <references refid="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" compoundref="esn_8h" startline="529">aureservoir::ESN&lt; T &gt;::Wback_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_157d29599c228981c785925b499596595" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
        <definition>const DEMatrix&amp; aureservoir::ESN&lt; T &gt;::getWout</definition>
        <argsstring>()</argsstring>
        <name>getWout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>output weight matrix (outputs x neurons+inputs) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="338" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="338" bodyend="338"/>
        <references refid="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" compoundref="esn_8h" startline="533">aureservoir::ESN&lt; T &gt;::Wout_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1edd9902fbc9a74b4540b35e6aa9a6ea0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref> &amp;</type>
        <definition>const DEVector&amp; aureservoir::ESN&lt; T &gt;::getX</definition>
        <argsstring>()</argsstring>
        <name>getX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>internal state vector x (size = neurons) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="340" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="340" bodyend="340"/>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1a319071ee7b33034aca7babbbc0adf81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref></type>
        <definition>DEMatrix aureservoir::ESN&lt; T &gt;::getDelays</definition>
        <argsstring>()</argsstring>
        <name>getDelays</name>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query the trained delays in delay&amp;sum readout <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimFilterDS" kindref="compound">SimFilterDS</ref> </para></simplesect>
<simplesect kind="return"><para>matrix with delay form neurons+inputs to all outputs size = (output x neurons+inputs) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="346" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="346" bodyend="346"/>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <referencedby refid="classaureservoir_1_1ESN_1c296d48ca9aacaf8fb8872ea1a1b4146" compoundref="esn_8hpp" startline="565" endline="579">aureservoir::ESN&lt; T &gt;::getDelays</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1a4f9ab709955a0ea4cdf9bde95437d2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref></type>
        <definition>DEMatrix aureservoir::ESN&lt; T &gt;::getReservoirDelays</definition>
        <argsstring>()</argsstring>
        <name>getReservoirDelays</name>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query the (fixed) delays between reservoir neurons <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimFilterDS" kindref="compound">SimFilterDS</ref> </para></simplesect>
<simplesect kind="return"><para>matrix with delays between all reservoir neurons size = (neurons x neurons) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="353" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="352" bodyend="353"/>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <referencedby refid="classaureservoir_1_1ESN_14769796e004939f475154a67bf23c593" compoundref="esn_8hpp" startline="582" endline="596">aureservoir::ESN&lt; T &gt;::getReservoirDelays</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GET internal data C-style interface</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_14f56f7b184b3a9d9d935127e94b2b5b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getWin</definition>
        <argsstring>(T **mtx, int *rows, int *cols)</argsstring>
        <name>getWin</name>
        <param>
          <type>T **</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get pointer to input weight matrix data and dimensions (neurons x inputs) <simplesect kind="warning"><para>This data is in fortran style column major storage ! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="362" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="512" bodyend="517"/>
        <references refid="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" compoundref="esn_8h" startline="522">aureservoir::ESN&lt; T &gt;::Win_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1b276273e0fa6b1ba9be3b08ce868a4f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getWback</definition>
        <argsstring>(T **mtx, int *rows, int *cols)</argsstring>
        <name>getWback</name>
        <param>
          <type>T **</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get pointer to feedback weight matrix data and dimensions (neurons x outputs) <simplesect kind="warning"><para>This data is in fortran style column major storage ! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="366" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="520" bodyend="525"/>
        <references refid="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" compoundref="esn_8h" startline="529">aureservoir::ESN&lt; T &gt;::Wback_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_12016b1cd44e7c5eecfff9671cbae41d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getWout</definition>
        <argsstring>(T **mtx, int *rows, int *cols)</argsstring>
        <name>getWout</name>
        <param>
          <type>T **</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get pointer to output weight matrix data and dimensions (outputs x neurons+inputs) <simplesect kind="warning"><para>This data is in fortran style column major storage ! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="370" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="528" bodyend="535"/>
        <references refid="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" compoundref="esn_8h" startline="533">aureservoir::ESN&lt; T &gt;::Wout_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1f4e9d4f79a7c51a9436a9de7d680692a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getX</definition>
        <argsstring>(T **vec, int *length)</argsstring>
        <name>getX</name>
        <param>
          <type>T **</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>get pointer to internal state vector x data and length </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="372" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="538" bodyend="542"/>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1c41303adb436ae8d99ad287307c6afec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getW</definition>
        <argsstring>(T *wmtx, int wrows, int wcols)</argsstring>
        <name>getW</name>
        <param>
          <type>T *</type>
          <declname>wmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wcols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies data of the sparse reservoir weight matrix into a dense C-style matrix. <simplesect kind="attention"><para>Memory of the C array must be allocated before! </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to matrix of size (neurons_ x neurons_) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="379" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="545" bodyend="562"/>
        <references refid="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" compoundref="esn_8h" startline="525">aureservoir::ESN&lt; T &gt;::W_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1c296d48ca9aacaf8fb8872ea1a1b4146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getDelays</definition>
        <argsstring>(T *wmtx, int wrows, int wcols)</argsstring>
        <name>getDelays</name>
        <param>
          <type>T *</type>
          <declname>wmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wcols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query the trained delays in delay&amp;sum readout <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimFilterDS" kindref="compound">SimFilterDS</ref> and copies the data into a C-style matrix </para></simplesect>
<simplesect kind="attention"><para>Memory of the C array must be allocated before! </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix with delay form neurons+inputs to all outputs size = (output x neurons+inputs) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="387" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="565" bodyend="579"/>
        <references refid="classaureservoir_1_1ESN_1a319071ee7b33034aca7babbbc0adf81" compoundref="esn_8h" startline="346" endline="346">aureservoir::ESN&lt; T &gt;::getDelays</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_14769796e004939f475154a67bf23c593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::getReservoirDelays</definition>
        <argsstring>(T *wmtx, int wrows, int wcols)</argsstring>
        <name>getReservoirDelays</name>
        <param>
          <type>T *</type>
          <declname>wmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wcols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query the (fixed) delays between reservoir neurons <simplesect kind="see"><para>class <ref refid="classaureservoir_1_1SimFilterDS" kindref="compound">SimFilterDS</ref> and copies the data into a C-style matrix </para></simplesect>
<simplesect kind="attention"><para>Memory of the C array must be allocated before! </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix with delays between all reservoir neurons size = (neurons x neurons) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="395" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="582" bodyend="596"/>
        <references refid="classaureservoir_1_1ESN_1a4f9ab709955a0ea4cdf9bde95437d2e" compoundref="esn_8h" startline="352" endline="353">aureservoir::ESN&lt; T &gt;::getReservoirDelays</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SET methods</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1a7edd9a67a5339823597ce7c56cbfda8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setInitAlgorithm</definition>
        <argsstring>(InitAlgorithm alg=INIT_STD)</argsstring>
        <name>setInitAlgorithm</name>
        <param>
          <type><ref refid="namespaceaureservoir_1fcd13e94b1f8f20257eab73b6a8498ce" kindref="member">InitAlgorithm</ref></type>
          <declname>alg</declname>
          <defval>INIT_STD</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set initialization algorithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="403" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="599" bodyend="613"/>
        <references refid="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" compoundref="esn_8h" startline="511">aureservoir::ESN&lt; T &gt;::init_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeaad7a7be9350552a1c9f36b3fa765ec05" compoundref="esn_8h" startline="578">aureservoir::ESN&lt; T &gt;::INIT_ALG</references>
        <references refid="namespaceaureservoir_1fcd13e94b1f8f20257eab73b6a8498ce0403fe730010b776fc7384aafffbafc5" compoundref="init_8h" startline="35">aureservoir::INIT_STD</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_14156c9a79c6dcc6b748e6cb491088165" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setTrainAlgorithm</definition>
        <argsstring>(TrainAlgorithm alg=TRAIN_PI)</argsstring>
        <name>setTrainAlgorithm</name>
        <param>
          <type><ref refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf" kindref="member">TrainAlgorithm</ref></type>
          <declname>alg</declname>
          <defval>TRAIN_PI</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set training algorithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="406" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="616" bodyend="648"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" compoundref="esn_8h" startline="514">aureservoir::ESN&lt; T &gt;::train_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4e8457810739551b22be6c4557eb8076" compoundref="esn_8h" startline="579">aureservoir::ESN&lt; T &gt;::TRAIN_ALG</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf943e2c08a10ad9e95586b1b80afd2a56" compoundref="train_8h" startline="39">aureservoir::TRAIN_DS_PI</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf247075eb070cb4c346ebc08eab32db87" compoundref="train_8h" startline="37">aureservoir::TRAIN_LS</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbfd06a4f161263a72d56f6ecabb98fa54e" compoundref="train_8h" startline="36">aureservoir::TRAIN_PI</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf14b31443d66d8ebff0940409daa43db4" compoundref="train_8h" startline="38">aureservoir::TRAIN_RIDGEREG</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_17f732773aed9c75093706cbeb3faa8fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setSimAlgorithm</definition>
        <argsstring>(SimAlgorithm alg=SIM_STD)</argsstring>
        <name>setSimAlgorithm</name>
        <param>
          <type><ref refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a" kindref="member">SimAlgorithm</ref></type>
          <declname>alg</declname>
          <defval>SIM_STD</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set simulation algorithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="409" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="651" bodyend="701"/>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a2304986b6862a50a3a8e633080d36b03" compoundref="simulate_8h" startline="42">aureservoir::SIM_BP</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123ab47d5c9464ab2f7dcb81bfcd386b2369" compoundref="simulate_8h" startline="43">aureservoir::SIM_FILTER</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a342f6ab7bc5d63f3d828c99f3811aaad" compoundref="simulate_8h" startline="44">aureservoir::SIM_FILTER2</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a3946a935a47b2ebffa86bcffbfcff65f" compoundref="simulate_8h" startline="45">aureservoir::SIM_FILTER_DS</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a38879faf2a4c65df30952d06c8c4bde6" compoundref="simulate_8h" startline="41">aureservoir::SIM_LI</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a37fb0f9ed7a59fdb80971a142a08ccd6" compoundref="simulate_8h" startline="40">aureservoir::SIM_SQUARE</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a3c8795d9c803f1d48d917b0604e796b7" compoundref="simulate_8h" startline="39">aureservoir::SIM_STD</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" compoundref="esn_8h" startline="580">aureservoir::ESN&lt; T &gt;::SIMULATE_ALG</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_185982669a674fda1518d3d7b8387badc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setSize</definition>
        <argsstring>(int neurons=10)</argsstring>
        <name>setSize</name>
        <param>
          <type>int</type>
          <declname>neurons</declname>
          <defval>10</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set reservoir size (nr of neurons) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="412" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="704" bodyend="711"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d8c5c336ed685583d3468436e979d8a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setInputs</definition>
        <argsstring>(int inputs=1)</argsstring>
        <name>setInputs</name>
        <param>
          <type>int</type>
          <declname>inputs</declname>
          <defval>1</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set nr of inputs to the reservoir </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="414" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="714" bodyend="721"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_11d5834b88eeda02d31500bcee464c743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setOutputs</definition>
        <argsstring>(int outputs=1)</argsstring>
        <name>setOutputs</name>
        <param>
          <type>int</type>
          <declname>outputs</declname>
          <defval>1</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set nr of outputs from the reservoir </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="416" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="724" bodyend="731"/>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1b2054d6478b52b33e6575b3783b5c05e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setNoise</definition>
        <argsstring>(double noise)</argsstring>
        <name>setNoise</name>
        <param>
          <type>double</type>
          <declname>noise</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set noise level for training/simulation algorithm <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise</parametername>
</parameternamelist>
<parameterdescription>
<para>with uniform distribution within [-noise|+noise] </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="420" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="734" bodyend="741"/>
        <references refid="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" compoundref="esn_8h" startline="567">aureservoir::ESN&lt; T &gt;::noise_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_10d84cb7a8e0d0e3f0bb8c7cf609bfc77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setInitParam</definition>
        <argsstring>(InitParameter key, T value=0.)</argsstring>
        <name>setInitParam</name>
        <param>
          <type><ref refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98" kindref="member">InitParameter</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>set initialization parameter </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="423" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="744" bodyend="747"/>
        <references refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" compoundref="esn_8h" startline="571">aureservoir::ESN&lt; T &gt;::init_params_</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setReservoirAct</definition>
        <argsstring>(ActivationFunction f=ACT_TANH)</argsstring>
        <name>setReservoirAct</name>
        <param>
          <type><ref refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce" kindref="member">ActivationFunction</ref></type>
          <declname>f</declname>
          <defval>ACT_TANH</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set reservoir activation function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="426" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="750" bodyend="778"/>
        <references refid="namespaceaureservoir_1be8a09ee0290ad4668127f350ed405e4" compoundref="activations_8h" startline="53" endline="54">aureservoir::act_linear</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce09c6f5805c0ee627c9469fcca1900bf4" compoundref="activations_8h" startline="35">aureservoir::ACT_LINEAR</references>
        <references refid="namespaceaureservoir_17c6d0a8b9f5e88d029fe6988e45157db" compoundref="activations_8h" startline="147" endline="151">aureservoir::act_sigmoid</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce90f145a551bf0955e1ab02eebf429234" compoundref="activations_8h" startline="38">aureservoir::ACT_SIGMOID</references>
        <references refid="namespaceaureservoir_18325ec625014a4e8599229b111c11f23" compoundref="activations_8h" startline="76" endline="80">aureservoir::act_tanh</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce1c132ad6945e95f8324319128cd22210" compoundref="activations_8h" startline="36">aureservoir::ACT_TANH</references>
        <references refid="namespaceaureservoir_1fa29fb60114d2064a41bff293bfb14ee" compoundref="activations_8h" startline="111" endline="118">aureservoir::act_tanh2</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce560574625ce248cdb43b7fa05815ca3f" compoundref="activations_8h" startline="37">aureservoir::ACT_TANH2</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea97cd57f7b6817ee0ae026526e6119ae1" compoundref="esn_8h" startline="576">aureservoir::ESN&lt; T &gt;::RESERVOIR_ACT</references>
        <references refid="classaureservoir_1_1ESN_12958fdd9ccf6324fccea5625a1209e18">aureservoir::ESN&lt; T &gt;::reservoirAct_</references>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setOutputAct</definition>
        <argsstring>(ActivationFunction f=ACT_LINEAR)</argsstring>
        <name>setOutputAct</name>
        <param>
          <type><ref refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce" kindref="member">ActivationFunction</ref></type>
          <declname>f</declname>
          <defval>ACT_LINEAR</defval>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set output activation function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="428" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="781" bodyend="807"/>
        <references refid="namespaceaureservoir_10e7ea0589074ceb326f001ef1a839c19" compoundref="activations_8h" startline="62" endline="63">aureservoir::act_invlinear</references>
        <references refid="namespaceaureservoir_15ed90c120a22372b9c6e14ee7896196d" compoundref="activations_8h" startline="161" endline="165">aureservoir::act_invsigmoid</references>
        <references refid="namespaceaureservoir_17121b5c78e4930be09eb44178864c29e" compoundref="activations_8h" startline="88" endline="92">aureservoir::act_invtanh</references>
        <references refid="namespaceaureservoir_1be8a09ee0290ad4668127f350ed405e4" compoundref="activations_8h" startline="53" endline="54">aureservoir::act_linear</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce09c6f5805c0ee627c9469fcca1900bf4" compoundref="activations_8h" startline="35">aureservoir::ACT_LINEAR</references>
        <references refid="namespaceaureservoir_17c6d0a8b9f5e88d029fe6988e45157db" compoundref="activations_8h" startline="147" endline="151">aureservoir::act_sigmoid</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce90f145a551bf0955e1ab02eebf429234" compoundref="activations_8h" startline="38">aureservoir::ACT_SIGMOID</references>
        <references refid="namespaceaureservoir_18325ec625014a4e8599229b111c11f23" compoundref="activations_8h" startline="76" endline="80">aureservoir::act_tanh</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce1c132ad6945e95f8324319128cd22210" compoundref="activations_8h" startline="36">aureservoir::ACT_TANH</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4b87db9277a823b8bedb26ea4dfa8dd0" compoundref="esn_8h" startline="577">aureservoir::ESN&lt; T &gt;::OUTPUT_ACT</references>
        <references refid="classaureservoir_1_1ESN_131797669e65f0d039cda2435fef79a1d">aureservoir::ESN&lt; T &gt;::outputAct_</references>
        <references refid="classaureservoir_1_1ESN_16d80a03ed3868b8284e8b5bdf69cbab6">aureservoir::ESN&lt; T &gt;::outputInvAct_</references>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SET internal data</header>
      <description><para>Additional method to set all parameters with string key-value pairs, which can be used for bindings from other languages <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of that parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="classaureservoir_1_1ESN_12e19669bb386bfd0cff1c711a47a6d04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setWin</definition>
        <argsstring>(const DEMatrix &amp;Win)</argsstring>
        <name>setWin</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>Win</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set input weight matrix (neurons x inputs) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="443" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="810" bodyend="818"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" compoundref="esn_8h" startline="522">aureservoir::ESN&lt; T &gt;::Win_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_11855dda7ab5db07b04d0b64a75d718c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setW</definition>
        <argsstring>(const DEMatrix &amp;W)</argsstring>
        <name>setW</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set reservoir weight matrix (neurons x neurons) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="445" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="821" bodyend="830"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" compoundref="esn_8h" startline="525">aureservoir::ESN&lt; T &gt;::W_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_11772aff81eecdd64b9259f2855d71dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setWback</definition>
        <argsstring>(const DEMatrix &amp;Wback)</argsstring>
        <name>setWback</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>Wback</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set feedback weight matrix (neurons x outputs) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="447" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="833" bodyend="841"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" compoundref="esn_8h" startline="529">aureservoir::ESN&lt; T &gt;::Wback_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1ece1f02a53da5658a000f8580aa630e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setWout</definition>
        <argsstring>(const DEMatrix &amp;Wout)</argsstring>
        <name>setWout</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref> &amp;</type>
          <declname>Wout</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set output weight matrix (outputs x neurons+inputs) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="449" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="844" bodyend="853"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" compoundref="esn_8h" startline="533">aureservoir::ESN&lt; T &gt;::Wout_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_15bee5e66fc658cad6dfed224a2816ad4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setX</definition>
        <argsstring>(const DEVector &amp;x)</argsstring>
        <name>setX</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
<para>set internal state vector (size = neurons) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="451" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="856" bodyend="862"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_188d42b6b03f3e5fdace793674896171e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setLastOutput</definition>
        <argsstring>(const DEVector &amp;last)</argsstring>
        <name>setLastOutput</name>
        <param>
          <type>const <ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref> &amp;</type>
          <declname>last</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set last output, stored by the simulation algorithm needed in singleStep simulation with feedback <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>vector with length = outputs </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="458" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="865" bodyend="873"/>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SET internal data C-style interface</header>
      <memberdef kind="function" id="classaureservoir_1_1ESN_16373802653476186ad92a3cd0545edd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setWin</definition>
        <argsstring>(T *inmtx, int inrows, int incols)</argsstring>
        <name>setWin</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set input weight matrix C-style interface (neurons x inputs) (data will be copied into a FLENS matrix) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to win matrix in row major storage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="469" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="876" bodyend="889"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" compoundref="esn_8h" startline="522">aureservoir::ESN&lt; T &gt;::Win_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d6dcd49bcd183e6cca7fb51ceede7011" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setW</definition>
        <argsstring>(T *inmtx, int inrows, int incols)</argsstring>
        <name>setW</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set reservoir weight matrix C-style interface (neurons x neurons) (data will be copied into a FLENS matrix) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a dense reservoir matrix in row major storage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="476" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="892" bodyend="908"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" compoundref="esn_8h" startline="525">aureservoir::ESN&lt; T &gt;::W_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_14e6e2af8884d217f0f2b3e8271ad75b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setWback</definition>
        <argsstring>(T *inmtx, int inrows, int incols)</argsstring>
        <name>setWback</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set feedback weight matrix C-style interface (neurons x outputs) (data will be copied into a FLENS matrix) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to wback matrix in row major storage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="483" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="911" bodyend="924"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" compoundref="esn_8h" startline="529">aureservoir::ESN&lt; T &gt;::Wback_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_11a6e3ae588a547941ecf6356ee5505b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setWout</definition>
        <argsstring>(T *inmtx, int inrows, int incols)</argsstring>
        <name>setWout</name>
        <param>
          <type>T *</type>
          <declname>inmtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inrows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incols</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set output weight matrix C-style interface (outputs x neurons+inputs) (data will be copied into a FLENS matrix) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmtx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to wout matrix in row major storage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="490" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="927" bodyend="941"/>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" compoundref="esn_8h" startline="533">aureservoir::ESN&lt; T &gt;::Wout_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_10baf7970fefc595668eee0ca7c8867a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setX</definition>
        <argsstring>(T *invec, int insize)</argsstring>
        <name>setX</name>
        <param>
          <type>T *</type>
          <declname>invec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insize</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set internal state vector C-style interface (size = neurons) (data will be copied into a FLENS matrix) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invec</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to state vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="497" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="944" bodyend="952"/>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1ea9bf0ca87290c6b88e237d20840a85e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aureservoir::ESN&lt; T &gt;::setLastOutput</definition>
        <argsstring>(T *last, int size)</argsstring>
        <name>setLastOutput</name>
        <param>
          <type>T *</type>
          <declname>last</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <exceptions> throw (<ref refid="classaureservoir_1_1AUExcept" kindref="compound">AUExcept</ref>)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set last output, stored by the simulation algorithm needed in singleStep simulation with feedback <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>vector with size = outputs </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="504" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="955" bodyend="964"/>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea" prot="protected" static="no">
        <name>NetInfo</name>
        <enumvalue id="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea97cd57f7b6817ee0ae026526e6119ae1" prot="protected">
          <name>RESERVOIR_ACT</name>
          <briefdescription>
<para>reservoir activation function </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4b87db9277a823b8bedb26ea4dfa8dd0" prot="protected">
          <name>OUTPUT_ACT</name>
          <briefdescription>
<para>output activation function </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeaad7a7be9350552a1c9f36b3fa765ec05" prot="protected">
          <name>INIT_ALG</name>
          <briefdescription>
<para>initialization algorithm </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4e8457810739551b22be6c4557eb8076" prot="protected">
          <name>TRAIN_ALG</name>
          <briefdescription>
<para>training algorithm </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" prot="protected">
          <name>SIMULATE_ALG</name>
          <briefdescription>
<para>simulation algorithm </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enum used in the InfoMap to query network </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="575" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="574" bodyend="581"/>
      </memberdef>
      <memberdef kind="typedef" id="classaureservoir_1_1ESN_19a682ddd9c6fd4ae431ea8a638b78839" prot="protected" static="no">
        <type>std::map&lt; <ref refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea" kindref="member">NetInfo</ref>, int &gt;</type>
        <definition>typedef std::map&lt;NetInfo, int&gt; aureservoir::ESN&lt; T &gt;::InfoMap</definition>
        <argsstring></argsstring>
        <name>InfoMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="582" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classaureservoir_1_1ESN_143b1421e1b5e29121dd186fa4e0a0d1c" prot="public" static="no">
        <type>std::map&lt; <ref refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98" kindref="member">InitParameter</ref>, T &gt;</type>
        <definition>typedef std::map&lt;InitParameter,T&gt; aureservoir::ESN&lt; T &gt;::ParameterMap</definition>
        <argsstring></argsstring>
        <name>ParameterMap</name>
        <briefdescription>
<para>typedef of a Parameter Map </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="69" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classaureservoir_1_1ESN_15dcf92f1a12c33752452cec78b3bc82d" prot="public" static="no">
        <type><ref refid="structaureservoir_1_1SPMatrix" kindref="compound">SPMatrix</ref>&lt; T &gt;::Type</type>
        <definition>typedef SPMatrix&lt;T&gt;::Type aureservoir::ESN&lt; T &gt;::SPMatrix</definition>
        <argsstring></argsstring>
        <name>SPMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="71" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classaureservoir_1_1ESN_1e7d601b1063bd084621efb54f412d1fd" prot="public" static="no">
        <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref>&lt; T &gt;::Type</type>
        <definition>typedef DEMatrix&lt;T&gt;::Type aureservoir::ESN&lt; T &gt;::DEMatrix</definition>
        <argsstring></argsstring>
        <name>DEMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="72" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classaureservoir_1_1ESN_132c49db29475ad01c38bbc208e77a4b0" prot="public" static="no">
        <type><ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref>&lt; T &gt;::Type</type>
        <definition>typedef DEVector&lt;T&gt;::Type aureservoir::ESN&lt; T &gt;::DEVector</definition>
        <argsstring></argsstring>
        <name>DEVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="73" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" prot="protected" static="no" mutable="no">
        <type><ref refid="classaureservoir_1_1InitBase" kindref="compound">InitBase</ref>&lt; T &gt; *</type>
        <definition>InitBase&lt;T&gt;* aureservoir::ESN&lt; T &gt;::init_</definition>
        <argsstring></argsstring>
        <name>init_</name>
        <briefdescription>
<para>function object for initialization algorithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="511" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="511" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e2922b7050f6259db289e456661454d1" compoundref="esn_8h" startline="94" endline="96">aureservoir::ESN&lt; T &gt;::init</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1a7edd9a67a5339823597ce7c56cbfda8" compoundref="esn_8hpp" startline="599" endline="613">aureservoir::ESN&lt; T &gt;::setInitAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e5bf8ab49d24a8b46df4801c0b2af787" compoundref="esn_8hpp" startline="105" endline="110">aureservoir::ESN&lt; T &gt;::~ESN</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" prot="protected" static="no" mutable="no">
        <type><ref refid="classaureservoir_1_1TrainBase" kindref="compound">TrainBase</ref>&lt; T &gt; *</type>
        <definition>TrainBase&lt;T&gt;* aureservoir::ESN&lt; T &gt;::train_</definition>
        <argsstring></argsstring>
        <name>train_</name>
        <briefdescription>
<para>function object for training algorithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="514" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="514" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_14156c9a79c6dcc6b748e6cb491088165" compoundref="esn_8hpp" startline="616" endline="648">aureservoir::ESN&lt; T &gt;::setTrainAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e5bf8ab49d24a8b46df4801c0b2af787" compoundref="esn_8hpp" startline="105" endline="110">aureservoir::ESN&lt; T &gt;::~ESN</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" prot="protected" static="no" mutable="no">
        <type><ref refid="classaureservoir_1_1SimBase" kindref="compound">SimBase</ref>&lt; T &gt; *</type>
        <definition>SimBase&lt;T&gt;* aureservoir::ESN&lt; T &gt;::sim_</definition>
        <argsstring></argsstring>
        <name>sim_</name>
        <briefdescription>
<para>function object for simulation algorithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="517" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="517" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1a319071ee7b33034aca7babbbc0adf81" compoundref="esn_8h" startline="346" endline="346">aureservoir::ESN&lt; T &gt;::getDelays</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1a4f9ab709955a0ea4cdf9bde95437d2e" compoundref="esn_8h" startline="352" endline="353">aureservoir::ESN&lt; T &gt;::getReservoirDelays</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d83bd214d17d7c1b06f9d1f9e85f3dcf" compoundref="esn_8h" startline="148" endline="152">aureservoir::ESN&lt; T &gt;::resetState</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_178881e130ba2c0b588c9cf5c6c1b7bd4" compoundref="esn_8hpp" startline="401" endline="408">aureservoir::ESN&lt; T &gt;::setBPCutoff</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_190413e9cb722f478b8771a0cdfd6a441" compoundref="esn_8hpp" startline="431" endline="441">aureservoir::ESN&lt; T &gt;::setIIRCoeff</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_188d42b6b03f3e5fdace793674896171e" compoundref="esn_8hpp" startline="865" endline="873">aureservoir::ESN&lt; T &gt;::setLastOutput</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_17f732773aed9c75093706cbeb3faa8fc" compoundref="esn_8hpp" startline="651" endline="701">aureservoir::ESN&lt; T &gt;::setSimAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" compoundref="esn_8h" startline="133" endline="134">aureservoir::ESN&lt; T &gt;::simulate</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d87d004894222f0653062bdc71dc2c78" compoundref="esn_8hpp" startline="353" endline="377">aureservoir::ESN&lt; T &gt;::simulateStep</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" compoundref="esn_8hpp" startline="255" endline="274">aureservoir::ESN&lt; T &gt;::teacherForce</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e5bf8ab49d24a8b46df4801c0b2af787" compoundref="esn_8hpp" startline="105" endline="110">aureservoir::ESN&lt; T &gt;::~ESN</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" prot="protected" static="no" mutable="no">
        <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref></type>
        <definition>DEMatrix aureservoir::ESN&lt; T &gt;::Win_</definition>
        <argsstring></argsstring>
        <name>Win_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>input weight matrix </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="522" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="522" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_103cf21acca2dc7410ebf4e5f2f87818f" compoundref="esn_8h" startline="332" endline="332">aureservoir::ESN&lt; T &gt;::getWin</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_12e19669bb386bfd0cff1c711a47a6d04" compoundref="esn_8hpp" startline="810" endline="818">aureservoir::ESN&lt; T &gt;::setWin</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" prot="protected" static="no" mutable="no">
        <type><ref refid="structaureservoir_1_1SPMatrix" kindref="compound">SPMatrix</ref></type>
        <definition>SPMatrix aureservoir::ESN&lt; T &gt;::W_</definition>
        <argsstring></argsstring>
        <name>W_</name>
        <briefdescription>
<para>reservoir weight matrix </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="525" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="525" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1d1b8423502f283e0ff7b219525abc337" compoundref="esn_8h" startline="334" endline="334">aureservoir::ESN&lt; T &gt;::getW</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_11855dda7ab5db07b04d0b64a75d718c2" compoundref="esn_8hpp" startline="821" endline="830">aureservoir::ESN&lt; T &gt;::setW</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" prot="protected" static="no" mutable="no">
        <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref></type>
        <definition>DEMatrix aureservoir::ESN&lt; T &gt;::Wback_</definition>
        <argsstring></argsstring>
        <name>Wback_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>feedback (output to reservoir) weight matrix </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="529" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="529" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_136e2868278aa27b9df6b7651ed5b867a" compoundref="esn_8h" startline="336" endline="336">aureservoir::ESN&lt; T &gt;::getWback</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_11772aff81eecdd64b9259f2855d71dfc" compoundref="esn_8hpp" startline="833" endline="841">aureservoir::ESN&lt; T &gt;::setWback</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" prot="protected" static="no" mutable="no">
        <type><ref refid="structaureservoir_1_1DEMatrix" kindref="compound">DEMatrix</ref></type>
        <definition>DEMatrix aureservoir::ESN&lt; T &gt;::Wout_</definition>
        <argsstring></argsstring>
        <name>Wout_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>output weight matrix (this will be trained) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="533" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="533" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_157d29599c228981c785925b499596595" compoundref="esn_8h" startline="338" endline="338">aureservoir::ESN&lt; T &gt;::getWout</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1ece1f02a53da5658a000f8580aa630e4" compoundref="esn_8hpp" startline="844" endline="853">aureservoir::ESN&lt; T &gt;::setWout</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" prot="protected" static="no" mutable="no">
        <type><ref refid="structaureservoir_1_1DEVector" kindref="compound">DEVector</ref></type>
        <definition>DEVector aureservoir::ESN&lt; T &gt;::x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>internal state vector holding the current value of each neuron in the reservoir </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="537" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="537" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1edd9902fbc9a74b4540b35e6aa9a6ea0" compoundref="esn_8h" startline="340" endline="340">aureservoir::ESN&lt; T &gt;::getX</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d83bd214d17d7c1b06f9d1f9e85f3dcf" compoundref="esn_8h" startline="148" endline="152">aureservoir::ESN&lt; T &gt;::resetState</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_15bee5e66fc658cad6dfed224a2816ad4" compoundref="esn_8hpp" startline="856" endline="862">aureservoir::ESN&lt; T &gt;::setX</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_12958fdd9ccf6324fccea5625a1209e18" prot="protected" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* aureservoir::ESN&lt; T &gt;::reservoirAct_)(T *data, int size)</definition>
        <argsstring>)(T *data, int size)</argsstring>
        <name>reservoirAct_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>activation function for the reservoir <simplesect kind="see"><para><ref refid="activations_8h" kindref="compound">activations.h</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="544"/>
        <referencedby refid="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" compoundref="esn_8hpp" startline="750" endline="778">aureservoir::ESN&lt; T &gt;::setReservoirAct</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_131797669e65f0d039cda2435fef79a1d" prot="protected" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* aureservoir::ESN&lt; T &gt;::outputAct_)(T *data, int size)</definition>
        <argsstring>)(T *data, int size)</argsstring>
        <name>outputAct_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>activation function for the outputs <simplesect kind="see"><para><ref refid="activations_8h" kindref="compound">activations.h</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="550"/>
        <referencedby refid="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" compoundref="esn_8hpp" startline="781" endline="807">aureservoir::ESN&lt; T &gt;::setOutputAct</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_16d80a03ed3868b8284e8b5bdf69cbab6" prot="protected" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* aureservoir::ESN&lt; T &gt;::outputInvAct_)(T *data, int size)</definition>
        <argsstring>)(T *data, int size)</argsstring>
        <name>outputInvAct_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>inverse activation function for the outputs <simplesect kind="see"><para><ref refid="activations_8h" kindref="compound">activations.h</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="556"/>
        <referencedby refid="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" compoundref="esn_8hpp" startline="781" endline="807">aureservoir::ESN&lt; T &gt;::setOutputAct</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int aureservoir::ESN&lt; T &gt;::neurons_</definition>
        <argsstring></argsstring>
        <name>neurons_</name>
        <briefdescription>
<para>nr of neurons in the reservoir (= reservoir size) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="560" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="560" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_141e3e08f736780e1afce7ba926c46f92" compoundref="esn_8h" startline="295" endline="295">aureservoir::ESN&lt; T &gt;::getSize</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_191d0fb143a7c8dbfb63bbaa1fccbda55" compoundref="esn_8hpp" startline="411" endline="428">aureservoir::ESN&lt; T &gt;::setBPCutoff</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1a7f9011ad241e85620adee8d14cd207f" compoundref="esn_8hpp" startline="444" endline="466">aureservoir::ESN&lt; T &gt;::setIIRCoeff</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_185982669a674fda1518d3d7b8387badc" compoundref="esn_8hpp" startline="704" endline="711">aureservoir::ESN&lt; T &gt;::setSize</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_11855dda7ab5db07b04d0b64a75d718c2" compoundref="esn_8hpp" startline="821" endline="830">aureservoir::ESN&lt; T &gt;::setW</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_11772aff81eecdd64b9259f2855d71dfc" compoundref="esn_8hpp" startline="833" endline="841">aureservoir::ESN&lt; T &gt;::setWback</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_12e19669bb386bfd0cff1c711a47a6d04" compoundref="esn_8hpp" startline="810" endline="818">aureservoir::ESN&lt; T &gt;::setWin</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1ece1f02a53da5658a000f8580aa630e4" compoundref="esn_8hpp" startline="844" endline="853">aureservoir::ESN&lt; T &gt;::setWout</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_15bee5e66fc658cad6dfed224a2816ad4" compoundref="esn_8hpp" startline="856" endline="862">aureservoir::ESN&lt; T &gt;::setX</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int aureservoir::ESN&lt; T &gt;::inputs_</definition>
        <argsstring></argsstring>
        <name>inputs_</name>
        <briefdescription>
<para>nr of inputs to the reservoir </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="562" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="562" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_138d67c10d14b742d37c31fb248c8d175" compoundref="esn_8h" startline="297" endline="297">aureservoir::ESN&lt; T &gt;::getInputs</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d8c5c336ed685583d3468436e979d8a2" compoundref="esn_8hpp" startline="714" endline="721">aureservoir::ESN&lt; T &gt;::setInputs</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_12e19669bb386bfd0cff1c711a47a6d04" compoundref="esn_8hpp" startline="810" endline="818">aureservoir::ESN&lt; T &gt;::setWin</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1ece1f02a53da5658a000f8580aa630e4" compoundref="esn_8hpp" startline="844" endline="853">aureservoir::ESN&lt; T &gt;::setWout</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1370b95f753b368bea3856c6889213ed0" compoundref="esn_8hpp" startline="319" endline="350">aureservoir::ESN&lt; T &gt;::simulate</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d87d004894222f0653062bdc71dc2c78" compoundref="esn_8hpp" startline="353" endline="377">aureservoir::ESN&lt; T &gt;::simulateStep</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" compoundref="esn_8hpp" startline="255" endline="274">aureservoir::ESN&lt; T &gt;::teacherForce</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int aureservoir::ESN&lt; T &gt;::outputs_</definition>
        <argsstring></argsstring>
        <name>outputs_</name>
        <briefdescription>
<para>nr of outputs from the reservoir </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="564" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="564" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1cb5fb557989a39b2f29853e4e5e294a1" compoundref="esn_8h" startline="299" endline="299">aureservoir::ESN&lt; T &gt;::getOutputs</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d83bd214d17d7c1b06f9d1f9e85f3dcf" compoundref="esn_8h" startline="148" endline="152">aureservoir::ESN&lt; T &gt;::resetState</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_188d42b6b03f3e5fdace793674896171e" compoundref="esn_8hpp" startline="865" endline="873">aureservoir::ESN&lt; T &gt;::setLastOutput</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_11d5834b88eeda02d31500bcee464c743" compoundref="esn_8hpp" startline="724" endline="731">aureservoir::ESN&lt; T &gt;::setOutputs</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_11772aff81eecdd64b9259f2855d71dfc" compoundref="esn_8hpp" startline="833" endline="841">aureservoir::ESN&lt; T &gt;::setWback</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1ece1f02a53da5658a000f8580aa630e4" compoundref="esn_8hpp" startline="844" endline="853">aureservoir::ESN&lt; T &gt;::setWout</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1370b95f753b368bea3856c6889213ed0" compoundref="esn_8hpp" startline="319" endline="350">aureservoir::ESN&lt; T &gt;::simulate</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d87d004894222f0653062bdc71dc2c78" compoundref="esn_8hpp" startline="353" endline="377">aureservoir::ESN&lt; T &gt;::simulateStep</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" compoundref="esn_8hpp" startline="255" endline="274">aureservoir::ESN&lt; T &gt;::teacherForce</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double aureservoir::ESN&lt; T &gt;::noise_</definition>
        <argsstring></argsstring>
        <name>noise_</name>
        <briefdescription>
<para>noise level </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="567" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="567" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" compoundref="esn_8hpp" startline="26" endline="57">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1ce91732de641dc4c102ee24da668bf01" compoundref="esn_8h" startline="301" endline="301">aureservoir::ESN&lt; T &gt;::getNoise</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1b2054d6478b52b33e6575b3783b5c05e" compoundref="esn_8hpp" startline="734" endline="741">aureservoir::ESN&lt; T &gt;::setNoise</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" prot="protected" static="no" mutable="no">
        <type><ref refid="classaureservoir_1_1ESN_143b1421e1b5e29121dd186fa4e0a0d1c" kindref="member">ParameterMap</ref></type>
        <definition>ParameterMap aureservoir::ESN&lt; T &gt;::init_params_</definition>
        <argsstring></argsstring>
        <name>init_params_</name>
        <briefdescription>
<para>parameter map for initialization arguments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="571" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="571" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1ea7de7feaa7d81c2d27a17d048b13447" compoundref="esn_8h" startline="308" endline="308">aureservoir::ESN&lt; T &gt;::getInitParam</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_10d84cb7a8e0d0e3f0bb8c7cf609bfc77" compoundref="esn_8hpp" startline="744" endline="747">aureservoir::ESN&lt; T &gt;::setInitParam</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" prot="protected" static="no" mutable="no">
        <type><ref refid="classaureservoir_1_1ESN_19a682ddd9c6fd4ae431ea8a638b78839" kindref="member">InfoMap</ref></type>
        <definition>InfoMap aureservoir::ESN&lt; T &gt;::net_info_</definition>
        <argsstring></argsstring>
        <name>net_info_</name>
        <briefdescription>
<para>holds strings of various <ref refid="classaureservoir_1_1ESN" kindref="compound">ESN</ref> settings </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="585" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="585" bodyend="-1"/>
        <referencedby refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" compoundref="esn_8hpp" startline="113" endline="176">aureservoir::ESN&lt; T &gt;::adapt</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1e9bc7c3da6f9ab961c0505a81f117c46" compoundref="esn_8h" startline="311" endline="312">aureservoir::ESN&lt; T &gt;::getInitAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_175b75a2dc732f0a666e18f8ca2189767" compoundref="esn_8h" startline="324" endline="325">aureservoir::ESN&lt; T &gt;::getOutputAct</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_10572a08a81856629baafdff0f1871915" compoundref="esn_8h" startline="321" endline="322">aureservoir::ESN&lt; T &gt;::getReservoirAct</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_104eb6c2bfba313922734c58fbff8b4af" compoundref="esn_8h" startline="317" endline="318">aureservoir::ESN&lt; T &gt;::getSimAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19a4ccadd8ba92b87332e38882acfef40" compoundref="esn_8h" startline="314" endline="315">aureservoir::ESN&lt; T &gt;::getTrainAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_178881e130ba2c0b588c9cf5c6c1b7bd4" compoundref="esn_8hpp" startline="401" endline="408">aureservoir::ESN&lt; T &gt;::setBPCutoff</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_190413e9cb722f478b8771a0cdfd6a441" compoundref="esn_8hpp" startline="431" endline="441">aureservoir::ESN&lt; T &gt;::setIIRCoeff</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1a7edd9a67a5339823597ce7c56cbfda8" compoundref="esn_8hpp" startline="599" endline="613">aureservoir::ESN&lt; T &gt;::setInitAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" compoundref="esn_8hpp" startline="781" endline="807">aureservoir::ESN&lt; T &gt;::setOutputAct</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" compoundref="esn_8hpp" startline="750" endline="778">aureservoir::ESN&lt; T &gt;::setReservoirAct</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_17f732773aed9c75093706cbeb3faa8fc" compoundref="esn_8hpp" startline="651" endline="701">aureservoir::ESN&lt; T &gt;::setSimAlgorithm</referencedby>
        <referencedby refid="classaureservoir_1_1ESN_14156c9a79c6dcc6b748e6cb491088165" compoundref="esn_8hpp" startline="616" endline="648">aureservoir::ESN&lt; T &gt;::setTrainAlgorithm</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aureservoir::ESN&lt; T &gt;::ESN</definition>
        <argsstring>()</argsstring>
        <name>ESN</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="76" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="26" bodyend="57"/>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce09c6f5805c0ee627c9469fcca1900bf4" compoundref="activations_8h" startline="35">aureservoir::ACT_LINEAR</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce1c132ad6945e95f8324319128cd22210" compoundref="activations_8h" startline="36">aureservoir::ACT_TANH</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98db1dca4e49516b1790fe21ec1cff75f5" compoundref="init_8h" startline="47">aureservoir::ALPHA</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98d5a6a266b20feb9dfe011d0d5e223087" compoundref="init_8h" startline="46">aureservoir::CONNECTIVITY</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b980cd43ea7ef81d55c9222dba73288a043" compoundref="init_8h" startline="51">aureservoir::FB_CONNECTIVITY</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b9829e7183dbadf26019d129ff5fb7877a4" compoundref="init_8h" startline="52">aureservoir::FB_SCALE</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98490f6a2e77017327c1b60bbd65873ada" compoundref="init_8h" startline="53">aureservoir::FB_SHIFT</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b98b3b22e40718b8703a4ed57c5cc21d80c" compoundref="init_8h" startline="48">aureservoir::IN_CONNECTIVITY</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b980b3995db2fb6ca472d1745fcbfdadfe7" compoundref="init_8h" startline="49">aureservoir::IN_SCALE</references>
        <references refid="namespaceaureservoir_15ffb41af926a3f5bf93374adc6b15b9802f10438caaa2d1b279162a7828b986c" compoundref="init_8h" startline="50">aureservoir::IN_SHIFT</references>
        <references refid="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" compoundref="esn_8h" startline="511">aureservoir::ESN&lt; T &gt;::init_</references>
        <references refid="namespaceaureservoir_1fcd13e94b1f8f20257eab73b6a8498ce0403fe730010b776fc7384aafffbafc5" compoundref="init_8h" startline="35">aureservoir::INIT_STD</references>
        <references refid="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" compoundref="esn_8h" startline="567">aureservoir::ESN&lt; T &gt;::noise_</references>
        <references refid="namespaceaureservoir_18e52d630f4503b6f6231bfa3b622cad9" compoundref="denormal_8h" startline="63" endline="115">aureservoir::set_denormal_flags</references>
        <references refid="classaureservoir_1_1ESN_1a7edd9a67a5339823597ce7c56cbfda8" compoundref="esn_8hpp" startline="599" endline="613">aureservoir::ESN&lt; T &gt;::setInitAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_10d84cb7a8e0d0e3f0bb8c7cf609bfc77" compoundref="esn_8hpp" startline="744" endline="747">aureservoir::ESN&lt; T &gt;::setInitParam</references>
        <references refid="classaureservoir_1_1ESN_1d8c5c336ed685583d3468436e979d8a2" compoundref="esn_8hpp" startline="714" endline="721">aureservoir::ESN&lt; T &gt;::setInputs</references>
        <references refid="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" compoundref="esn_8hpp" startline="781" endline="807">aureservoir::ESN&lt; T &gt;::setOutputAct</references>
        <references refid="classaureservoir_1_1ESN_11d5834b88eeda02d31500bcee464c743" compoundref="esn_8hpp" startline="724" endline="731">aureservoir::ESN&lt; T &gt;::setOutputs</references>
        <references refid="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" compoundref="esn_8hpp" startline="750" endline="778">aureservoir::ESN&lt; T &gt;::setReservoirAct</references>
        <references refid="classaureservoir_1_1ESN_17f732773aed9c75093706cbeb3faa8fc" compoundref="esn_8hpp" startline="651" endline="701">aureservoir::ESN&lt; T &gt;::setSimAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_185982669a674fda1518d3d7b8387badc" compoundref="esn_8hpp" startline="704" endline="711">aureservoir::ESN&lt; T &gt;::setSize</references>
        <references refid="classaureservoir_1_1ESN_14156c9a79c6dcc6b748e6cb491088165" compoundref="esn_8hpp" startline="616" endline="648">aureservoir::ESN&lt; T &gt;::setTrainAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a3c8795d9c803f1d48d917b0604e796b7" compoundref="simulate_8h" startline="39">aureservoir::SIM_STD</references>
        <references refid="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" compoundref="esn_8h" startline="514">aureservoir::ESN&lt; T &gt;::train_</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbfd06a4f161263a72d56f6ecabb98fa54e" compoundref="train_8h" startline="36">aureservoir::TRAIN_PI</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_195ab498ad4f291a3399ff79466fdbfa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aureservoir::ESN&lt; T &gt;::ESN</definition>
        <argsstring>(const ESN&lt; T &gt; &amp;src)</argsstring>
        <name>ESN</name>
        <param>
          <type>const <ref refid="classaureservoir_1_1ESN" kindref="compound">ESN</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="79" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="60" bodyend="63"/>
        <references refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" compoundref="esn_8hpp" startline="66" endline="102">aureservoir::ESN&lt; T &gt;::operator=</references>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classaureservoir_1_1ESN" kindref="compound">ESN</ref> &amp;</type>
        <definition>ESN&lt; T &gt; &amp; aureservoir::ESN&lt; T &gt;::operator=</definition>
        <argsstring>(const ESN&lt; T &gt; &amp;src)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classaureservoir_1_1ESN" kindref="compound">ESN</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>assignement operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="82" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="66" bodyend="102"/>
        <references refid="classaureservoir_1_1ESN_1e9bc7c3da6f9ab961c0505a81f117c46" compoundref="esn_8h" startline="311" endline="312">aureservoir::ESN&lt; T &gt;::getInitAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_175b75a2dc732f0a666e18f8ca2189767" compoundref="esn_8h" startline="324" endline="325">aureservoir::ESN&lt; T &gt;::getOutputAct</references>
        <references refid="classaureservoir_1_1ESN_10572a08a81856629baafdff0f1871915" compoundref="esn_8h" startline="321" endline="322">aureservoir::ESN&lt; T &gt;::getReservoirAct</references>
        <references refid="classaureservoir_1_1ESN_104eb6c2bfba313922734c58fbff8b4af" compoundref="esn_8h" startline="317" endline="318">aureservoir::ESN&lt; T &gt;::getSimAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_19a4ccadd8ba92b87332e38882acfef40" compoundref="esn_8h" startline="314" endline="315">aureservoir::ESN&lt; T &gt;::getTrainAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_1e2922b7050f6259db289e456661454d1" compoundref="esn_8h" startline="94" endline="96">aureservoir::ESN&lt; T &gt;::init</references>
        <references refid="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" compoundref="esn_8h" startline="511">aureservoir::ESN&lt; T &gt;::init_</references>
        <references refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" compoundref="esn_8h" startline="571">aureservoir::ESN&lt; T &gt;::init_params_</references>
        <references refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" compoundref="esn_8h" startline="562">aureservoir::ESN&lt; T &gt;::inputs_</references>
        <references refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" compoundref="esn_8h" startline="585">aureservoir::ESN&lt; T &gt;::net_info_</references>
        <references refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" compoundref="esn_8h" startline="560">aureservoir::ESN&lt; T &gt;::neurons_</references>
        <references refid="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" compoundref="esn_8h" startline="567">aureservoir::ESN&lt; T &gt;::noise_</references>
        <references refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" compoundref="esn_8h" startline="564">aureservoir::ESN&lt; T &gt;::outputs_</references>
        <references refid="classaureservoir_1_1ESN_1a7edd9a67a5339823597ce7c56cbfda8" compoundref="esn_8hpp" startline="599" endline="613">aureservoir::ESN&lt; T &gt;::setInitAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" compoundref="esn_8hpp" startline="781" endline="807">aureservoir::ESN&lt; T &gt;::setOutputAct</references>
        <references refid="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" compoundref="esn_8hpp" startline="750" endline="778">aureservoir::ESN&lt; T &gt;::setReservoirAct</references>
        <references refid="classaureservoir_1_1ESN_14156c9a79c6dcc6b748e6cb491088165" compoundref="esn_8hpp" startline="616" endline="648">aureservoir::ESN&lt; T &gt;::setTrainAlgorithm</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" compoundref="esn_8h" startline="580">aureservoir::ESN&lt; T &gt;::SIMULATE_ALG</references>
        <references refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" compoundref="esn_8hpp" startline="179" endline="252">aureservoir::ESN&lt; T &gt;::train</references>
        <references refid="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" compoundref="esn_8h" startline="514">aureservoir::ESN&lt; T &gt;::train_</references>
        <references refid="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" compoundref="esn_8h" startline="525">aureservoir::ESN&lt; T &gt;::W_</references>
        <references refid="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" compoundref="esn_8h" startline="529">aureservoir::ESN&lt; T &gt;::Wback_</references>
        <references refid="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" compoundref="esn_8h" startline="522">aureservoir::ESN&lt; T &gt;::Win_</references>
        <references refid="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" compoundref="esn_8h" startline="533">aureservoir::ESN&lt; T &gt;::Wout_</references>
        <references refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" compoundref="esn_8h" startline="537">aureservoir::ESN&lt; T &gt;::x_</references>
        <referencedby refid="classaureservoir_1_1ESN_195ab498ad4f291a3399ff79466fdbfa3" compoundref="esn_8hpp" startline="60" endline="63">aureservoir::ESN&lt; T &gt;::ESN</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1e5bf8ab49d24a8b46df4801c0b2af787" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aureservoir::ESN&lt; T &gt;::~ESN</definition>
        <argsstring>()</argsstring>
        <name>~ESN</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="85" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="105" bodyend="110"/>
        <references refid="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" compoundref="esn_8h" startline="511">aureservoir::ESN&lt; T &gt;::init_</references>
        <references refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" compoundref="esn_8h" startline="517">aureservoir::ESN&lt; T &gt;::sim_</references>
        <references refid="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" compoundref="esn_8h" startline="514">aureservoir::ESN&lt; T &gt;::train_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classaureservoir_1_1ESN_1d2b7c4da5d09cabaf476126a82802d55" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string aureservoir::ESN&lt; T &gt;::getActString</definition>
        <argsstring>(int act)</argsstring>
        <name>getActString</name>
        <param>
          <type>int</type>
          <declname>act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string of activation function enum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="588" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="967" bodyend="987"/>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce09c6f5805c0ee627c9469fcca1900bf4" compoundref="activations_8h" startline="35">aureservoir::ACT_LINEAR</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce90f145a551bf0955e1ab02eebf429234" compoundref="activations_8h" startline="38">aureservoir::ACT_SIGMOID</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce1c132ad6945e95f8324319128cd22210" compoundref="activations_8h" startline="36">aureservoir::ACT_TANH</references>
        <references refid="namespaceaureservoir_13e434e16dad75c96d11d9ec383a55bce560574625ce248cdb43b7fa05815ca3f" compoundref="activations_8h" startline="37">aureservoir::ACT_TANH2</references>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_11db6876e512c3f95d74a1a4551b7c556" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string aureservoir::ESN&lt; T &gt;::getInitString</definition>
        <argsstring>(int alg)</argsstring>
        <name>getInitString</name>
        <param>
          <type>int</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string of init algorithm enum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="590" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="990" bodyend="1000"/>
        <references refid="namespaceaureservoir_1fcd13e94b1f8f20257eab73b6a8498ce0403fe730010b776fc7384aafffbafc5" compoundref="init_8h" startline="35">aureservoir::INIT_STD</references>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1c787f77ca1d66b92597a3f40b73da5a5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string aureservoir::ESN&lt; T &gt;::getSimString</definition>
        <argsstring>(int alg)</argsstring>
        <name>getSimString</name>
        <param>
          <type>int</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string of simulation algorithm enum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="592" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="1003" bodyend="1031"/>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a2304986b6862a50a3a8e633080d36b03" compoundref="simulate_8h" startline="42">aureservoir::SIM_BP</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123ab47d5c9464ab2f7dcb81bfcd386b2369" compoundref="simulate_8h" startline="43">aureservoir::SIM_FILTER</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a342f6ab7bc5d63f3d828c99f3811aaad" compoundref="simulate_8h" startline="44">aureservoir::SIM_FILTER2</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a3946a935a47b2ebffa86bcffbfcff65f" compoundref="simulate_8h" startline="45">aureservoir::SIM_FILTER_DS</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a38879faf2a4c65df30952d06c8c4bde6" compoundref="simulate_8h" startline="41">aureservoir::SIM_LI</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a37fb0f9ed7a59fdb80971a142a08ccd6" compoundref="simulate_8h" startline="40">aureservoir::SIM_SQUARE</references>
        <references refid="namespaceaureservoir_1abe3039fd500ced0b4928c64f10e123a3c8795d9c803f1d48d917b0604e796b7" compoundref="simulate_8h" startline="39">aureservoir::SIM_STD</references>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
      </memberdef>
      <memberdef kind="function" id="classaureservoir_1_1ESN_1dc760e3521c01ed98ec1d857026851cf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string aureservoir::ESN&lt; T &gt;::getTrainString</definition>
        <argsstring>(int alg)</argsstring>
        <name>getTrainString</name>
        <param>
          <type>int</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string of training algorithm enum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="594" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.hpp" bodystart="1034" bodyend="1053"/>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf943e2c08a10ad9e95586b1b80afd2a56" compoundref="train_8h" startline="39">aureservoir::TRAIN_DS_PI</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf247075eb070cb4c346ebc08eab32db87" compoundref="train_8h" startline="37">aureservoir::TRAIN_LS</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbfd06a4f161263a72d56f6ecabb98fa54e" compoundref="train_8h" startline="36">aureservoir::TRAIN_PI</references>
        <references refid="namespaceaureservoir_170d36d9e2ce3444f3fd44862cf073dbf14b31443d66d8ebff0940409daa43db4" compoundref="train_8h" startline="38">aureservoir::TRAIN_RIDGEREG</references>
        <referencedby refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" compoundref="esn_8hpp" startline="469" endline="509">aureservoir::ESN&lt; T &gt;::post</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class for a basic Echo State Network </para>    </briefdescription>
    <detaileddescription>
<para>This class implements a basic Echo State Network as described in articles by Herbert Jaeger on the following page: <simplesect kind="see"><para><ulink url="http://www.scholarpedia.org/article/Echo_State_Network">http://www.scholarpedia.org/article/Echo_State_Network</ulink></para></simplesect>
The template argument T can be float or double. Single Precision (float) saves quite some computation time.</para><para>The &quot;echo state&quot; approach looks at RNNs from a new angle. Large RNNs are interpreted as &quot;reservoirs&quot; of complex, excitable dynamics. Output units &quot;tap&quot; from this reservoir by linearly combining the desired output signal from the rich variety of excited reservoir signals. This idea leads to training algorithms where only the network-to-output connection weights have to be trained. This can be done with known, highly efficient linear regression algorithms. from <simplesect kind="see"><para><ulink url="http://www.faculty.iu-bremen.de/hjaeger/esn_research.html">http://www.faculty.iu-bremen.de/hjaeger/esn_research.html</ulink></para></simplesect>
For more information and a complete documentation of this library see <simplesect kind="see"><para><ulink url="http://aureservoir.sourceforge.net">http://aureservoir.sourceforge.net</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" line="65" bodyfile="/home/holzi/versioniert/aureservoir/aureservoir/esn.h" bodystart="64" bodyend="615"/>
    <listofallmembers>
      <member refid="classaureservoir_1_1ESN_1c50f04511b90f729186719efecc95b86" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>adapt</name></member>
      <member refid="classaureservoir_1_1ESN_1d9ed5ad77d21639a04d2c7d431636e46" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>adapt</name></member>
      <member refid="classaureservoir_1_1ESN_1e7d601b1063bd084621efb54f412d1fd" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>DEMatrix</name></member>
      <member refid="classaureservoir_1_1ESN_132c49db29475ad01c38bbc208e77a4b0" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>DEVector</name></member>
      <member refid="classaureservoir_1_1ESN_141d8d494888c52b767c847547513d29b" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>ESN</name></member>
      <member refid="classaureservoir_1_1ESN_195ab498ad4f291a3399ff79466fdbfa3" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>ESN</name></member>
      <member refid="classaureservoir_1_1ESN_1d2b7c4da5d09cabaf476126a82802d55" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getActString</name></member>
      <member refid="classaureservoir_1_1ESN_1a319071ee7b33034aca7babbbc0adf81" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getDelays</name></member>
      <member refid="classaureservoir_1_1ESN_1c296d48ca9aacaf8fb8872ea1a1b4146" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getDelays</name></member>
      <member refid="classaureservoir_1_1ESN_1e9bc7c3da6f9ab961c0505a81f117c46" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getInitAlgorithm</name></member>
      <member refid="classaureservoir_1_1ESN_1ea7de7feaa7d81c2d27a17d048b13447" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getInitParam</name></member>
      <member refid="classaureservoir_1_1ESN_11db6876e512c3f95d74a1a4551b7c556" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getInitString</name></member>
      <member refid="classaureservoir_1_1ESN_138d67c10d14b742d37c31fb248c8d175" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getInputs</name></member>
      <member refid="classaureservoir_1_1ESN_1ce91732de641dc4c102ee24da668bf01" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getNoise</name></member>
      <member refid="classaureservoir_1_1ESN_175b75a2dc732f0a666e18f8ca2189767" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getOutputAct</name></member>
      <member refid="classaureservoir_1_1ESN_1cb5fb557989a39b2f29853e4e5e294a1" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getOutputs</name></member>
      <member refid="classaureservoir_1_1ESN_10572a08a81856629baafdff0f1871915" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getReservoirAct</name></member>
      <member refid="classaureservoir_1_1ESN_1a4f9ab709955a0ea4cdf9bde95437d2e" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getReservoirDelays</name></member>
      <member refid="classaureservoir_1_1ESN_14769796e004939f475154a67bf23c593" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getReservoirDelays</name></member>
      <member refid="classaureservoir_1_1ESN_104eb6c2bfba313922734c58fbff8b4af" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getSimAlgorithm</name></member>
      <member refid="classaureservoir_1_1ESN_1c787f77ca1d66b92597a3f40b73da5a5" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getSimString</name></member>
      <member refid="classaureservoir_1_1ESN_141e3e08f736780e1afce7ba926c46f92" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getSize</name></member>
      <member refid="classaureservoir_1_1ESN_19a4ccadd8ba92b87332e38882acfef40" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getTrainAlgorithm</name></member>
      <member refid="classaureservoir_1_1ESN_1dc760e3521c01ed98ec1d857026851cf" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getTrainString</name></member>
      <member refid="classaureservoir_1_1ESN_1d1b8423502f283e0ff7b219525abc337" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getW</name></member>
      <member refid="classaureservoir_1_1ESN_1c41303adb436ae8d99ad287307c6afec" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getW</name></member>
      <member refid="classaureservoir_1_1ESN_136e2868278aa27b9df6b7651ed5b867a" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getWback</name></member>
      <member refid="classaureservoir_1_1ESN_1b276273e0fa6b1ba9be3b08ce868a4f6" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getWback</name></member>
      <member refid="classaureservoir_1_1ESN_103cf21acca2dc7410ebf4e5f2f87818f" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getWin</name></member>
      <member refid="classaureservoir_1_1ESN_14f56f7b184b3a9d9d935127e94b2b5b0" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getWin</name></member>
      <member refid="classaureservoir_1_1ESN_157d29599c228981c785925b499596595" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getWout</name></member>
      <member refid="classaureservoir_1_1ESN_12016b1cd44e7c5eecfff9671cbae41d1" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getWout</name></member>
      <member refid="classaureservoir_1_1ESN_1edd9902fbc9a74b4540b35e6aa9a6ea0" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getX</name></member>
      <member refid="classaureservoir_1_1ESN_1f4e9d4f79a7c51a9436a9de7d680692a" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>getX</name></member>
      <member refid="classaureservoir_1_1ESN_19a682ddd9c6fd4ae431ea8a638b78839" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>InfoMap</name></member>
      <member refid="classaureservoir_1_1ESN_1e2922b7050f6259db289e456661454d1" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>init</name></member>
      <member refid="classaureservoir_1_1ESN_17304f6cad65acd8a365089b44922e7fb" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>init_</name></member>
      <member refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeaad7a7be9350552a1c9f36b3fa765ec05" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>INIT_ALG</name></member>
      <member refid="classaureservoir_1_1ESN_18f3b35b5ac2242e375319dbf78f03b73" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>init_params_</name></member>
      <member refid="classaureservoir_1_1ESN_1c15108dd5d291349b4cfeeff6be19bfa" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>InitBase&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1ffcd21225865c34b1366ce6b8e166fa2" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>InitStd&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_19931f4f456c9d087a826555413f62fbc" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>inputs_</name></member>
      <member refid="classaureservoir_1_1ESN_17017520c849df21b75ea364f59bd89e7" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>net_info_</name></member>
      <member refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>NetInfo</name></member>
      <member refid="classaureservoir_1_1ESN_1ebef31a6b898a2caa57d24a2230cacf2" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>neurons_</name></member>
      <member refid="classaureservoir_1_1ESN_125a89e7454101c39215a6798b8c4da09" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>noise_</name></member>
      <member refid="classaureservoir_1_1ESN_1d65ca98492b52c40c4f8d96ca572fd88" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>operator=</name></member>
      <member refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4b87db9277a823b8bedb26ea4dfa8dd0" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>OUTPUT_ACT</name></member>
      <member refid="classaureservoir_1_1ESN_131797669e65f0d039cda2435fef79a1d" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>outputAct_</name></member>
      <member refid="classaureservoir_1_1ESN_16d80a03ed3868b8284e8b5bdf69cbab6" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>outputInvAct_</name></member>
      <member refid="classaureservoir_1_1ESN_136c002d4ab73a440cc48008fdc62738e" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>outputs_</name></member>
      <member refid="classaureservoir_1_1ESN_143b1421e1b5e29121dd186fa4e0a0d1c" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>ParameterMap</name></member>
      <member refid="classaureservoir_1_1ESN_19153f98b1eddbb3917b1895b0221a9c0" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>post</name></member>
      <member refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea97cd57f7b6817ee0ae026526e6119ae1" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>RESERVOIR_ACT</name></member>
      <member refid="classaureservoir_1_1ESN_12958fdd9ccf6324fccea5625a1209e18" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>reservoirAct_</name></member>
      <member refid="classaureservoir_1_1ESN_1d83bd214d17d7c1b06f9d1f9e85f3dcf" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>resetState</name></member>
      <member refid="classaureservoir_1_1ESN_178881e130ba2c0b588c9cf5c6c1b7bd4" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setBPCutoff</name></member>
      <member refid="classaureservoir_1_1ESN_191d0fb143a7c8dbfb63bbaa1fccbda55" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setBPCutoff</name></member>
      <member refid="classaureservoir_1_1ESN_190413e9cb722f478b8771a0cdfd6a441" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setIIRCoeff</name></member>
      <member refid="classaureservoir_1_1ESN_1a7f9011ad241e85620adee8d14cd207f" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setIIRCoeff</name></member>
      <member refid="classaureservoir_1_1ESN_1a7edd9a67a5339823597ce7c56cbfda8" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setInitAlgorithm</name></member>
      <member refid="classaureservoir_1_1ESN_10d84cb7a8e0d0e3f0bb8c7cf609bfc77" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setInitParam</name></member>
      <member refid="classaureservoir_1_1ESN_1d8c5c336ed685583d3468436e979d8a2" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setInputs</name></member>
      <member refid="classaureservoir_1_1ESN_188d42b6b03f3e5fdace793674896171e" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setLastOutput</name></member>
      <member refid="classaureservoir_1_1ESN_1ea9bf0ca87290c6b88e237d20840a85e" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setLastOutput</name></member>
      <member refid="classaureservoir_1_1ESN_1b2054d6478b52b33e6575b3783b5c05e" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setNoise</name></member>
      <member refid="classaureservoir_1_1ESN_1adbb70bea99473056b0ba8b74e42ecfa" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setOutputAct</name></member>
      <member refid="classaureservoir_1_1ESN_11d5834b88eeda02d31500bcee464c743" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setOutputs</name></member>
      <member refid="classaureservoir_1_1ESN_10e5b807f804e119ed569fc3d64774569" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setReservoirAct</name></member>
      <member refid="classaureservoir_1_1ESN_17f732773aed9c75093706cbeb3faa8fc" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setSimAlgorithm</name></member>
      <member refid="classaureservoir_1_1ESN_185982669a674fda1518d3d7b8387badc" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setSize</name></member>
      <member refid="classaureservoir_1_1ESN_14156c9a79c6dcc6b748e6cb491088165" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setTrainAlgorithm</name></member>
      <member refid="classaureservoir_1_1ESN_11855dda7ab5db07b04d0b64a75d718c2" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setW</name></member>
      <member refid="classaureservoir_1_1ESN_1d6dcd49bcd183e6cca7fb51ceede7011" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setW</name></member>
      <member refid="classaureservoir_1_1ESN_11772aff81eecdd64b9259f2855d71dfc" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setWback</name></member>
      <member refid="classaureservoir_1_1ESN_14e6e2af8884d217f0f2b3e8271ad75b9" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setWback</name></member>
      <member refid="classaureservoir_1_1ESN_12e19669bb386bfd0cff1c711a47a6d04" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setWin</name></member>
      <member refid="classaureservoir_1_1ESN_16373802653476186ad92a3cd0545edd0" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setWin</name></member>
      <member refid="classaureservoir_1_1ESN_1ece1f02a53da5658a000f8580aa630e4" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setWout</name></member>
      <member refid="classaureservoir_1_1ESN_11a6e3ae588a547941ecf6356ee5505b4" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setWout</name></member>
      <member refid="classaureservoir_1_1ESN_15bee5e66fc658cad6dfed224a2816ad4" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setX</name></member>
      <member refid="classaureservoir_1_1ESN_10baf7970fefc595668eee0ca7c8867a8" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>setX</name></member>
      <member refid="classaureservoir_1_1ESN_1df7be365aa1246965cb0738631759e94" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>sim_</name></member>
      <member refid="classaureservoir_1_1ESN_13e3c3fdbb36eb2486bdd7c0753c2f9ff" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimBase&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1fd00f52134466f63ee8b919951733757" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimBP&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_11578954dfa00c2d838c7d023c9f6026d" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimFilter2&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1f095d841bde905bddf3923445b8e0ebd" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimFilter&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1c8b28874c27f39ce0067ca5e1474d226" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimFilterDS&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1206264c0d590319efec92db462588748" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimLI&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_11552ee6255e2596578a8859aba9f5a3d" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimSquare&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_114588a3c64b2c4106d3669ed86b41f38" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SimStd&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1e9ebb9c720273693b3de73dacc4356f3" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>simulate</name></member>
      <member refid="classaureservoir_1_1ESN_1370b95f753b368bea3856c6889213ed0" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>simulate</name></member>
      <member refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdeab6c82a22796b8e39b77b348212329f9b" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SIMULATE_ALG</name></member>
      <member refid="classaureservoir_1_1ESN_1d87d004894222f0653062bdc71dc2c78" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>simulateStep</name></member>
      <member refid="classaureservoir_1_1ESN_15dcf92f1a12c33752452cec78b3bc82d" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>SPMatrix</name></member>
      <member refid="classaureservoir_1_1ESN_1e401e0ebee9169990dc2d177ce94dd64" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>teacherForce</name></member>
      <member refid="classaureservoir_1_1ESN_1e6fb9b7fbf1499756d0939c5ccf2ea31" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>teacherForce</name></member>
      <member refid="classaureservoir_1_1ESN_189da45e482e37b541dc7c9e9a294d9aa" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>train</name></member>
      <member refid="classaureservoir_1_1ESN_1b078825cfdbc5f11d337942d768d79e8" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>train</name></member>
      <member refid="classaureservoir_1_1ESN_1b8d992b2cdfe3e4615722b20e5a955c9" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>train_</name></member>
      <member refid="classaureservoir_1_1ESN_119346eaf5d5fe49a8308415bf76efdea4e8457810739551b22be6c4557eb8076" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>TRAIN_ALG</name></member>
      <member refid="classaureservoir_1_1ESN_1fadb2174ebe2fc0e46e4189829495d8a" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>TrainBase&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1446111b9fdc9f67797ef49bd87b58c24" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>TrainDSPI&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1e7c4beca8c90bf892827a3716e978f4a" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>TrainLS&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_17e49b87f78cfa7e35a6d873a4c40b9dd" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>TrainPI&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_1cd5aba36fe572e08dd1cbe7d881a56e4" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>TrainRidgeReg&lt; T &gt;</name></member>
      <member refid="classaureservoir_1_1ESN_192a1182eebbe2f09256bf138ef778ce7" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>W_</name></member>
      <member refid="classaureservoir_1_1ESN_1852f35c397fda2253522ee6d96f60f6b" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>Wback_</name></member>
      <member refid="classaureservoir_1_1ESN_16f36c1193cfdc55a6c85e95c54c161c8" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>Win_</name></member>
      <member refid="classaureservoir_1_1ESN_1e1f9056f7fa3fcb1bfe9b63b4002eaad" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>Wout_</name></member>
      <member refid="classaureservoir_1_1ESN_17fff05a05547047e668b16a0754fed0d" prot="protected" virt="non-virtual"><scope>aureservoir::ESN</scope><name>x_</name></member>
      <member refid="classaureservoir_1_1ESN_1e5bf8ab49d24a8b46df4801c0b2af787" prot="public" virt="non-virtual"><scope>aureservoir::ESN</scope><name>~ESN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
